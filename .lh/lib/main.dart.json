{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1745608246468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747396748480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,122 +1,330 @@\n import 'package:flutter/material.dart';\n+import 'package:adhan/adhan.dart';\n+import 'package:geocodes/geocodes.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:intl/intl.dart';\n \n void main() {\n-  runApp(const MyApp());\n+  runApp(const AdhanApp());\n }\n \n-class MyApp extends StatelessWidget {\n-  const MyApp({super.key});\n+class AdhanApp extends StatelessWidget {\n+  const AdhanApp({super.key});\n \n-  // This widget is the root of your application.\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n-      title: 'Flutter Demo',\n+      title: 'Adhan App',\n       theme: ThemeData(\n-        // This is the theme of your application.\n-        //\n-        // TRY THIS: Try running your application with \"flutter run\". You'll see\n-        // the application has a purple toolbar. Then, without quitting the app,\n-        // try changing the seedColor in the colorScheme below to Colors.green\n-        // and then invoke \"hot reload\" (save your changes or press the \"hot\n-        // reload\" button in a Flutter-supported IDE, or press \"r\" if you used\n-        // the command line to start the app).\n-        //\n-        // Notice that the counter didn't reset back to zero; the application\n-        // state is not lost during the reload. To reset the state, use hot\n-        // restart instead.\n-        //\n-        // This works for code too, not just values: Most code changes can be\n-        // tested with just a hot reload.\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n+        primarySwatch: Colors.blue,\n       ),\n-      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n+      home: const AdhanTestPage(),\n     );\n   }\n }\n \n-class MyHomePage extends StatefulWidget {\n-  const MyHomePage({super.key, required this.title});\n+class AdhanTestPage extends StatefulWidget {\n+  const AdhanTestPage({super.key});\n \n-  // This widget is the home page of your application. It is stateful, meaning\n-  // that it has a State object (defined below) that contains fields that affect\n-  // how it looks.\n+  @override\n+  _AdhanTestPageState createState() => _AdhanTestPageState();\n+}\n \n-  // This class is the configuration for the state. It holds the values (in this\n-  // case the title) provided by the parent (in this case the App widget) and\n-  // used by the build method of the State. Fields in a Widget subclass are\n-  // always marked \"final\".\n+class _AdhanTestPageState extends State<AdhanTestPage> {\n+  // Default values,\n+  Coordinates? _coordinates;\n+  CalculationParameters _calculationParameters =\n+      CalculationMethod.muslimWorldLeague();\n+  final _controller = ScrollController();\n \n-  final String title;\n+  String _prayerTimesResult = 'Press the button to calculate prayer times.';\n+  String _qiblaDirectionResult = 'Press the button to calculate Qibla direction.';\n+  String _currentLocation = \"Fetching Location...\";\n \n-  @override\n-  State<MyHomePage> createState() => _MyHomePageState();\n-}\n+  // Get Current Location\n+    Future<void> _getCurrentLocation() async {\n+    try {\n+      LocationPermission permission = await Geolocator.requestPermission();\n+      if (permission == LocationPermission.denied ||\n+          permission == LocationPermission.deniedForever) {\n+        setState(() {\n+          _currentLocation = \"Location services are disabled.\";\n+          _coordinates = null;\n+        });\n+        return;\n+      }\n \n-class _MyHomePageState extends State<MyHomePage> {\n-  int _counter = 0;\n+      Position position = await Geolocator.getCurrentPosition(\n+          desiredAccuracy: LocationAccuracy.high);\n+      setState(() {\n+        _coordinates = Coordinates(position.latitude, position.longitude);\n+      });\n \n-  void _incrementCounter() {\n+      // Get the place name from the coordinates\n+      List<Placemark> placemarks = await placemarkFromCoordinates(position.latitude, position.longitude);\n+\n+      if (placemarks.isNotEmpty) {\n+        Placemark place = placemarks.first;\n+        setState(() {\n+          _currentLocation = \"${place.locality}, ${place.administrativeArea}, ${place.country}\";\n+        });\n+      } else {\n+        setState(() {\n+          _currentLocation = \"Location found, but could not determine place name.\";\n+        });\n+      }\n+    } catch (e) {\n+      setState(() {\n+        _currentLocation = \"Error: ${e.toString()}\";\n+        _coordinates = null;\n+      });\n+      print(\"Error getting location: $e\");\n+    }\n+  }\n+\n+  // 1. Calculate Prayer Times\n+  Future<void> _calculatePrayerTimes() async {\n+    if (_coordinates == null) {\n+      await _getCurrentLocation();\n+      if (_coordinates == null) {\n+        // Location not available, show message and return\n+        setState(() {\n+          _prayerTimesResult =\n+              'Please enable location services and try again. Location: $_currentLocation';\n+        });\n+        return;\n+      }\n+    }\n+\n+    final now = DateTime.now();\n+    final prayerTimes = PrayerTimes(_coordinates!, now, _calculationParameters);\n+\n+    if (prayerTimes != null) {\n+      setState(() {\n+        _prayerTimesResult = 'Fajr: ${DateFormat.jm().format(prayerTimes.fajr!)}\\n'\n+            'Sunrise: ${DateFormat.jm().format(prayerTimes.sunrise!)}\\n'\n+            'Dhuhr: ${DateFormat.jm().format(prayerTimes.dhuhr!)}\\n'\n+            'Asr: ${DateFormat.jm().format(prayerTimes.asr!)}\\n'\n+            'Sunset: ${DateFormat.jm().format(prayerTimes.sunset!)}\\n'\n+            'Maghrib: ${DateFormat.jm().format(prayerTimes.maghrib!)}\\n'\n+            'Isha: ${DateFormat.jm().format(prayerTimes.isha!)}';\n+      });\n+    } else {\n+      setState(() {\n+        _prayerTimesResult = 'Failed to calculate prayer times.';\n+      });\n+    }\n+  }\n+\n+  // 2. Calculate Qibla Direction\n+  Future<void> _calculateQiblaDirection() async {\n+     if (_coordinates == null) {\n+      await _getCurrentLocation();\n+       if (_coordinates == null) {\n+        // Location not available, show message and return\n+        setState(() {\n+          _qiblaDirectionResult =\n+              'Please enable location services and try again. Location: $_currentLocation';\n+        });\n+        return;\n+      }\n+    }\n+    final qiblaDirection = Qibla.direction(_coordinates!);\n     setState(() {\n-      // This call to setState tells the Flutter framework that something has\n-      // changed in this State, which causes it to rerun the build method below\n-      // so that the display can reflect the updated values. If we changed\n-      // _counter without calling setState(), then the build method would not be\n-      // called again, and so nothing would appear to happen.\n-      _counter++;\n+      _qiblaDirectionResult = 'Qibla Direction: ${qiblaDirection.toStringAsFixed(2)}Â°';\n     });\n   }\n \n+  // 3. Select Calculation Method\n+  void _showCalculationMethodDialog() async {\n+    final selectedMethod = await showDialog<CalculationParameters>(\n+      context: context,\n+      builder: (context) {\n+        return AlertDialog(\n+          title: const Text('Select Calculation Method'),\n+          content: StatefulBuilder(\n+            builder: (context, setState) {\n+            return SingleChildScrollView(\n+              child: Column(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                  _buildMethodRadioButton(\n+                    'Muslim World League',\n+                    CalculationMethod.muslimWorldLeague(),\n+                    setState,\n+                  ),\n+                  _buildMethodRadioButton(\n+                    'Egyptian General Authority of Survey',\n+                    CalculationMethod.egyptian(),\n+                    setState,\n+                  ),\n+                  _buildMethodRadioButton(\n+                    'University of Islamic Sciences, Karachi',\n+                    CalculationMethod.karachi(),\n+                    setState,\n+                  ),\n+                  _buildMethodRadioButton(\n+                    'Umm al-Qura University, Makkah',\n+                    CalculationMethod.ummAlQura(),\n+                    setState,\n+                  ),\n+                  _buildMethodRadioButton(\n+                    'Islamic Society of North America (ISNA)',\n+                    CalculationMethod.isna(),\n+                    setState,\n+                  ),\n+                  _buildMethodRadioButton(\n+                    'Custom',\n+                    CalculationMethod.custom(),\n+                    setState,\n+                  ),\n+                ],\n+              ),\n+            );\n+            }\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(_calculationParameters),\n+              child: const Text('OK'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+\n+    if (selectedMethod != null) {\n+      setState(() {\n+        _calculationParameters = selectedMethod;\n+      });\n+    }\n+  }\n+\n+    // Helper method to build radio buttons for calculation methods\n+  Widget _buildMethodRadioButton(\n+      String label, CalculationParameters method, StateSetter setState) {\n+    return RadioListTile<CalculationParameters>(\n+      title: Text(label),\n+      value: method,\n+      groupValue: _calculationParameters,\n+      onChanged: (value) {\n+        if (value != null) {\n+          setState(() {\n+            _calculationParameters = value;\n+          });\n+        }\n+      },\n+    );\n+  }\n+\n+  // 4. Select Prayer Time For Date\n+    void _showSelectDateDialog() async {\n+    final selectedDate = await showDatePicker(\n+      context: context,\n+      initialDate: DateTime.now(),\n+      firstDate: DateTime(1900),\n+      lastDate: DateTime(2100),\n+    );\n+\n+    if (selectedDate != null) {\n+       if (_coordinates == null) {\n+        await _getCurrentLocation();\n+         if (_coordinates == null) {\n+          setState(() {\n+             _prayerTimesResult =\n+              'Please enable location services and try again. Location: $_currentLocation';\n+          });\n+          return;\n+        }\n+      }\n+      final prayerTimes = PrayerTimes(_coordinates!, selectedDate, _calculationParameters);\n+      setState(() {\n+        _prayerTimesResult = 'Prayer Times for ${DateFormat.yMd().format(selectedDate)}:\\n'\n+            'Fajr: ${DateFormat.jm().format(prayerTimes.fajr!)}\\n'\n+            'Sunrise: ${DateFormat.jm().format(prayerTimes.sunrise!)}\\n'\n+            'Dhuhr: ${DateFormat.jm().format(prayerTimes.dhuhr!)}\\n'\n+            'Asr: ${DateFormat.jm().format(prayerTimes.asr!)}\\n'\n+            'Sunset: ${DateFormat.jm().format(prayerTimes.sunset!)}\\n'\n+            'Maghrib: ${DateFormat.jm().format(prayerTimes.maghrib!)}\\n'\n+            'Isha: ${DateFormat.jm().format(prayerTimes.isha!)}';\n+      });\n+    }\n+  }\n+\n   @override\n+  void dispose() {\n+    _controller.dispose();\n+    super.dispose();\n+  }\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    _getCurrentLocation(); // Get location when the page loads\n+  }\n+\n+  @override\n   Widget build(BuildContext context) {\n-    // This method is rerun every time setState is called, for instance as done\n-    // by the _incrementCounter method above.\n-    //\n-    // The Flutter framework has been optimized to make rerunning build methods\n-    // fast, so that you can just rebuild anything that needs updating rather\n-    // than having to individually change instances of widgets.\n     return Scaffold(\n       appBar: AppBar(\n-        // TRY THIS: Try changing the color here to a specific color (to\n-        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar\n-        // change color while the other colors stay the same.\n-        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n-        // Here we take the value from the MyHomePage object that was created by\n-        // the App.build method, and use it to set our appbar title.\n-        title: Text(widget.title),\n+        title: const Text('Adhan App Test'),\n       ),\n-      body: Center(\n-        // Center is a layout widget. It takes a single child and positions it\n-        // in the middle of the parent.\n-        child: Column(\n-          // Column is also a layout widget. It takes a list of children and\n-          // arranges them vertically. By default, it sizes itself to fit its\n-          // children horizontally, and tries to be as tall as its parent.\n-          //\n-          // Column has various properties to control how it sizes itself and\n-          // how it positions its children. Here we use mainAxisAlignment to\n-          // center the children vertically; the main axis here is the vertical\n-          // axis because Columns are vertical (the cross axis would be\n-          // horizontal).\n-          //\n-          // TRY THIS: Invoke \"debug painting\" (choose the \"Toggle Debug Paint\"\n-          // action in the IDE, or press \"p\" in the console), to see the\n-          // wireframe for each widget.\n-          mainAxisAlignment: MainAxisAlignment.center,\n-          children: <Widget>[\n-            const Text('You have pushed the button this many times:'),\n-            Text(\n-              '$_counter',\n-              style: Theme.of(context).textTheme.headlineMedium,\n-            ),\n-          ],\n+      body: Padding(\n+        padding: const EdgeInsets.all(16.0),\n+        child: SingleChildScrollView(\n+          controller: _controller,\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.stretch,\n+            children: <Widget>[\n+              Text(\"Current Location: $_currentLocation\"),\n+              ElevatedButton(\n+                onPressed: _getCurrentLocation,\n+                child: const Text('Get Current Location'),\n+              ),\n+              const SizedBox(height: 20),\n+              ElevatedButton(\n+                onPressed: _calculatePrayerTimes,\n+                child: const Text('1. Calculate Prayer Times'),\n+              ),\n+              const SizedBox(height: 20),\n+              Text(\n+                _prayerTimesResult,\n+                style: const TextStyle(fontWeight: FontWeight.bold),\n+              ),\n+               const SizedBox(height: 20),\n+              ElevatedButton(\n+                onPressed: _calculateQiblaDirection,\n+                child: const Text('2. Calculate Qibla Direction'),\n+              ),\n+              const SizedBox(height: 20),\n+              Text(\n+                _qiblaDirectionResult,\n+                style: const TextStyle(fontWeight: FontWeight.bold),\n+              ),\n+              const SizedBox(height: 20),\n+              ElevatedButton(\n+                onPressed: _showCalculationMethodDialog,\n+                child: const Text('3. Select Calculation Method'),\n+              ),\n+              const SizedBox(height: 20),\n+              Text(\n+                'Selected Method: ${_calculationParameters.methodName}',\n+                style: const TextStyle(fontWeight: FontWeight.bold),\n+              ),\n+              const SizedBox(height: 20),\n+              ElevatedButton(\n+                onPressed: _showSelectDateDialog,\n+                child: const Text('4. Select Prayer Time For Date'),\n+              ),\n+              const SizedBox(height: 20),\n+            ],\n+          ),\n         ),\n       ),\n-      floatingActionButton: FloatingActionButton(\n-        onPressed: _incrementCounter,\n-        tooltip: 'Increment',\n-        child: const Icon(Icons.add),\n-      ), // This trailing comma makes auto-formatting nicer for build methods.\n     );\n   }\n }\n"
                },
                {
                    "date": 1747397117366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:adhan/adhan.dart';\n-import 'package:geocodes/geocodes.dart';\n+import 'package:geocoding/geocoding.dart'; // Changed import\n import 'package:geolocator/geolocator.dart';\n import 'package:intl/intl.dart';\n \n void main() {\n@@ -14,9 +14,11 @@\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       title: 'Adhan App',\n-      theme: ThemeData(primarySwatch: Colors.blue),\n+      theme: ThemeData(\n+        primarySwatch: Colors.blue,\n+      ),\n       home: const AdhanTestPage(),\n     );\n   }\n }\n@@ -35,10 +37,9 @@\n       CalculationMethod.muslimWorldLeague();\n   final _controller = ScrollController();\n \n   String _prayerTimesResult = 'Press the button to calculate prayer times.';\n-  String _qiblaDirectionResult =\n-      'Press the button to calculate Qibla direction.';\n+  String _qiblaDirectionResult = 'Press the button to calculate Qibla direction.';\n   String _currentLocation = \"Fetching Location...\";\n \n   // Get Current Location\n   Future<void> _getCurrentLocation() async {\n@@ -53,30 +54,24 @@\n         return;\n       }\n \n       Position position = await Geolocator.getCurrentPosition(\n-        desiredAccuracy: LocationAccuracy.high,\n-      );\n+          desiredAccuracy: LocationAccuracy.high);\n       setState(() {\n         _coordinates = Coordinates(position.latitude, position.longitude);\n       });\n \n       // Get the place name from the coordinates\n-      List<Placemark> placemarks = await placemarkFromCoordinates(\n-        position.latitude,\n-        position.longitude,\n-      );\n+      List<Placemark> placemarks = await placemarkFromCoordinates(position.latitude, position.longitude);\n \n       if (placemarks.isNotEmpty) {\n         Placemark place = placemarks.first;\n         setState(() {\n-          _currentLocation =\n-              \"${place.locality}, ${place.administrativeArea}, ${place.country}\";\n+          _currentLocation = \"${place.locality}, ${place.administrativeArea}, ${place.country}\";\n         });\n       } else {\n         setState(() {\n-          _currentLocation =\n-              \"Location found, but could not determine place name.\";\n+          _currentLocation = \"Location found, but could not determine place name.\";\n         });\n       }\n     } catch (e) {\n       setState(() {\n@@ -105,10 +100,9 @@\n     final prayerTimes = PrayerTimes(_coordinates!, now, _calculationParameters);\n \n     if (prayerTimes != null) {\n       setState(() {\n-        _prayerTimesResult =\n-            'Fajr: ${DateFormat.jm().format(prayerTimes.fajr!)}\\n'\n+        _prayerTimesResult = 'Fajr: ${DateFormat.jm().format(prayerTimes.fajr!)}\\n'\n             'Sunrise: ${DateFormat.jm().format(prayerTimes.sunrise!)}\\n'\n             'Dhuhr: ${DateFormat.jm().format(prayerTimes.dhuhr!)}\\n'\n             'Asr: ${DateFormat.jm().format(prayerTimes.asr!)}\\n'\n             'Sunset: ${DateFormat.jm().format(prayerTimes.sunset!)}\\n'\n@@ -136,10 +130,9 @@\n       }\n     }\n     final qiblaDirection = Qibla.direction(_coordinates!);\n     setState(() {\n-      _qiblaDirectionResult =\n-          'Qibla Direction: ${qiblaDirection.toStringAsFixed(2)}Â°';\n+      _qiblaDirectionResult = 'Qibla Direction: ${qiblaDirection.toStringAsFixed(2)}Â°';\n     });\n   }\n \n   // 3. Select Calculation Method\n@@ -187,18 +180,17 @@\n                     ),\n                   ],\n                 ),\n               );\n-            },\n+            }\n           ),\n           actions: [\n             TextButton(\n               onPressed: () => Navigator.of(context).pop(),\n               child: const Text('Cancel'),\n             ),\n             TextButton(\n-              onPressed:\n-                  () => Navigator.of(context).pop(_calculationParameters),\n+              onPressed: () => Navigator.of(context).pop(_calculationParameters),\n               child: const Text('OK'),\n             ),\n           ],\n         );\n@@ -213,12 +205,9 @@\n   }\n \n   // Helper method to build radio buttons for calculation methods\n   Widget _buildMethodRadioButton(\n-    String label,\n-    CalculationParameters method,\n-    StateSetter setState,\n-  ) {\n+      String label, CalculationParameters method, StateSetter setState) {\n     return RadioListTile<CalculationParameters>(\n       title: Text(label),\n       value: method,\n       groupValue: _calculationParameters,\n@@ -251,16 +240,11 @@\n           });\n           return;\n         }\n       }\n-      final prayerTimes = PrayerTimes(\n-        _coordinates!,\n-        selectedDate,\n-        _calculationParameters,\n-      );\n+      final prayerTimes = PrayerTimes(_coordinates!, selectedDate, _calculationParameters);\n       setState(() {\n-        _prayerTimesResult =\n-            'Prayer Times for ${DateFormat.yMd().format(selectedDate)}:\\n'\n+        _prayerTimesResult = 'Prayer Times for ${DateFormat.yMd().format(selectedDate)}:\\n'\n             'Fajr: ${DateFormat.jm().format(prayerTimes.fajr!)}\\n'\n             'Sunrise: ${DateFormat.jm().format(prayerTimes.sunrise!)}\\n'\n             'Dhuhr: ${DateFormat.jm().format(prayerTimes.dhuhr!)}\\n'\n             'Asr: ${DateFormat.jm().format(prayerTimes.asr!)}\\n'\n@@ -285,9 +269,11 @@\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n-      appBar: AppBar(title: const Text('Adhan App Test')),\n+      appBar: AppBar(\n+        title: const Text('Adhan App Test'),\n+      ),\n       body: Padding(\n         padding: const EdgeInsets.all(16.0),\n         child: SingleChildScrollView(\n           controller: _controller,\n@@ -341,4 +327,5 @@\n       ),\n     );\n   }\n }\n+\n"
                },
                {
                    "date": 1747397384387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:adhan/adhan.dart';\n-import 'package:geocoding/geocoding.dart'; // Changed import\n+import 'package:geocoding/geocoding.dart';\n import 'package:geolocator/geolocator.dart';\n import 'package:intl/intl.dart';\n \n void main() {\n@@ -14,9 +14,11 @@\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       title: 'Adhan App',\n-      theme: ThemeData(primarySwatch: Colors.blue),\n+      theme: ThemeData(\n+        primarySwatch: Colors.blue,\n+      ),\n       home: const AdhanTestPage(),\n     );\n   }\n }\n@@ -30,18 +32,16 @@\n \n class _AdhanTestPageState extends State<AdhanTestPage> {\n   // Default values,\n   Coordinates? _coordinates;\n-  CalculationParameters _calculationParameters =\n-      CalculationMethod.muslimWorldLeague();\n+  CalculationParameters _calculationParameters = CalculationMethod.muslimWorldLeague();\n   final _controller = ScrollController();\n \n   String _prayerTimesResult = 'Press the button to calculate prayer times.';\n-  String _qiblaDirectionResult =\n-      'Press the button to calculate Qibla direction.';\n+  String _qiblaDirectionResult = 'Press the button to calculate Qibla direction.';\n   String _currentLocation = \"Fetching Location...\";\n \n-  // Get Current Location\n+    // Get Current Location\n   Future<void> _getCurrentLocation() async {\n     try {\n       LocationPermission permission = await Geolocator.requestPermission();\n       if (permission == LocationPermission.denied ||\n@@ -53,19 +53,16 @@\n         return;\n       }\n \n       Position position = await Geolocator.getCurrentPosition(\n-        desiredAccuracy: LocationAccuracy.high,\n-      );\n+          desiredAccuracy: LocationAccuracy.high);\n       setState(() {\n         _coordinates = Coordinates(position.latitude, position.longitude);\n       });\n \n       // Get the place name from the coordinates\n-      List<Placemark> placemarks = await placemarkFromCoordinates(\n-        position.latitude,\n-        position.longitude,\n-      );\n+      List<Placemark> placemarks =\n+          await placemarkFromCoordinates(position.latitude, position.longitude);\n \n       if (placemarks.isNotEmpty) {\n         Placemark place = placemarks.first;\n         setState(() {\n@@ -123,11 +120,11 @@\n   }\n \n   // 2. Calculate Qibla Direction\n   Future<void> _calculateQiblaDirection() async {\n-    if (_coordinates == null) {\n+     if (_coordinates == null) {\n       await _getCurrentLocation();\n-      if (_coordinates == null) {\n+       if (_coordinates == null) {\n         // Location not available, show message and return\n         setState(() {\n           _qiblaDirectionResult =\n               'Please enable location services and try again. Location: $_currentLocation';\n@@ -187,18 +184,18 @@\n                     ),\n                   ],\n                 ),\n               );\n-            },\n+            }\n           ),\n           actions: [\n             TextButton(\n               onPressed: () => Navigator.of(context).pop(),\n               child: const Text('Cancel'),\n             ),\n             TextButton(\n-              onPressed:\n-                  () => Navigator.of(context).pop(_calculationParameters),\n+              onPressed: () =>\n+                  Navigator.of(context).pop(_calculationParameters),\n               child: const Text('OK'),\n             ),\n           ],\n         );\n@@ -213,12 +210,9 @@\n   }\n \n   // Helper method to build radio buttons for calculation methods\n   Widget _buildMethodRadioButton(\n-    String label,\n-    CalculationParameters method,\n-    StateSetter setState,\n-  ) {\n+      String label, CalculationParameters method, StateSetter setState) {\n     return RadioListTile<CalculationParameters>(\n       title: Text(label),\n       value: method,\n       groupValue: _calculationParameters,\n@@ -241,23 +235,19 @@\n       lastDate: DateTime(2100),\n     );\n \n     if (selectedDate != null) {\n-      if (_coordinates == null) {\n+       if (_coordinates == null) {\n         await _getCurrentLocation();\n-        if (_coordinates == null) {\n+         if (_coordinates == null) {\n           setState(() {\n-            _prayerTimesResult =\n-                'Please enable location services and try again. Location: $_currentLocation';\n+             _prayerTimesResult =\n+              'Please enable location services and try again. Location: $_currentLocation';\n           });\n           return;\n         }\n       }\n-      final prayerTimes = PrayerTimes(\n-        _coordinates!,\n-        selectedDate,\n-        _calculationParameters,\n-      );\n+      final prayerTimes = PrayerTimes(_coordinates!, selectedDate, _calculationParameters);\n       setState(() {\n         _prayerTimesResult =\n             'Prayer Times for ${DateFormat.yMd().format(selectedDate)}:\\n'\n             'Fajr: ${DateFormat.jm().format(prayerTimes.fajr!)}\\n'\n@@ -285,9 +275,11 @@\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n-      appBar: AppBar(title: const Text('Adhan App Test')),\n+      appBar: AppBar(\n+        title: const Text('Adhan App Test'),\n+      ),\n       body: Padding(\n         padding: const EdgeInsets.all(16.0),\n         child: SingleChildScrollView(\n           controller: _controller,\n@@ -325,9 +317,9 @@\n                 child: const Text('3. Select Calculation Method'),\n               ),\n               const SizedBox(height: 20),\n               Text(\n-                'Selected Method: ${_calculationParameters.methodName}',\n+                'Selected Method: ${_calculationParameters.method.name}',\n                 style: const TextStyle(fontWeight: FontWeight.bold),\n               ),\n               const SizedBox(height: 20),\n               ElevatedButton(\n@@ -341,4 +333,5 @@\n       ),\n     );\n   }\n }\n+\n"
                }
            ],
            "date": 1745608246468,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        // This is the theme of your application.\n        //\n        // TRY THIS: Try running your application with \"flutter run\". You'll see\n        // the application has a purple toolbar. Then, without quitting the app,\n        // try changing the seedColor in the colorScheme below to Colors.green\n        // and then invoke \"hot reload\" (save your changes or press the \"hot\n        // reload\" button in a Flutter-supported IDE, or press \"r\" if you used\n        // the command line to start the app).\n        //\n        // Notice that the counter didn't reset back to zero; the application\n        // state is not lost during the reload. To reset the state, use hot\n        // restart instead.\n        //\n        // This works for code too, not just values: Most code changes can be\n        // tested with just a hot reload.\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  // This widget is the home page of your application. It is stateful, meaning\n  // that it has a State object (defined below) that contains fields that affect\n  // how it looks.\n\n  // This class is the configuration for the state. It holds the values (in this\n  // case the title) provided by the parent (in this case the App widget) and\n  // used by the build method of the State. Fields in a Widget subclass are\n  // always marked \"final\".\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      // This call to setState tells the Flutter framework that something has\n      // changed in this State, which causes it to rerun the build method below\n      // so that the display can reflect the updated values. If we changed\n      // _counter without calling setState(), then the build method would not be\n      // called again, and so nothing would appear to happen.\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // This method is rerun every time setState is called, for instance as done\n    // by the _incrementCounter method above.\n    //\n    // The Flutter framework has been optimized to make rerunning build methods\n    // fast, so that you can just rebuild anything that needs updating rather\n    // than having to individually change instances of widgets.\n    return Scaffold(\n      appBar: AppBar(\n        // TRY THIS: Try changing the color here to a specific color (to\n        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar\n        // change color while the other colors stay the same.\n        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n        // Here we take the value from the MyHomePage object that was created by\n        // the App.build method, and use it to set our appbar title.\n        title: Text(widget.title),\n      ),\n      body: Center(\n        // Center is a layout widget. It takes a single child and positions it\n        // in the middle of the parent.\n        child: Column(\n          // Column is also a layout widget. It takes a list of children and\n          // arranges them vertically. By default, it sizes itself to fit its\n          // children horizontally, and tries to be as tall as its parent.\n          //\n          // Column has various properties to control how it sizes itself and\n          // how it positions its children. Here we use mainAxisAlignment to\n          // center the children vertically; the main axis here is the vertical\n          // axis because Columns are vertical (the cross axis would be\n          // horizontal).\n          //\n          // TRY THIS: Invoke \"debug painting\" (choose the \"Toggle Debug Paint\"\n          // action in the IDE, or press \"p\" in the console), to see the\n          // wireframe for each widget.\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text('You have pushed the button this many times:'),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.headlineMedium,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ), // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n"
        }
    ]
}