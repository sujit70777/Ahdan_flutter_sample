{
    "sourceFile": "lib/main_old.txt",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747570357509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747570363264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+import 'package:flutter/material.dart';\n+import 'package:adhan/adhan.dart';\n+import 'package:intl/intl.dart';\n+\n+void main() => runApp(PrayerTimesDemo());\n+\n+class PrayerTimesDemo extends StatefulWidget {\n+  @override\n+  _PrayerTimesDemoState createState() => _PrayerTimesDemoState();\n+}\n+\n+class _PrayerTimesDemoState extends State<PrayerTimesDemo> {\n+  final TextEditingController _latController = TextEditingController(\n+    text: '60.1699',\n+  );\n+  final TextEditingController _lngController = TextEditingController(\n+    text: '24.9384',\n+  );\n+  // --- Added for date picker ---\n+  final TextEditingController _dateController = TextEditingController();\n+  DateTime _selectedDate = DateTime.now();\n+  final DateFormat _dateFormat = DateFormat('yyyy-MM-dd');\n+  // --- End added ---\n+  PrayerTimes? _prayerTimes;\n+  final DateFormat _timeFormat = DateFormat.jm();\n+  CalculationParameters _params =\n+      CalculationMethod.muslim_world_league.getParameters();\n+\n+  final List<CalculationMethod> _calculationMethods = [\n+    CalculationMethod.muslim_world_league,\n+    CalculationMethod.egyptian,\n+    CalculationMethod.karachi,\n+    CalculationMethod.umm_al_qura,\n+    CalculationMethod.dubai,\n+    CalculationMethod.moon_sighting_committee,\n+    CalculationMethod.north_america,\n+    CalculationMethod.kuwait,\n+    CalculationMethod.qatar,\n+    CalculationMethod.singapore,\n+    CalculationMethod.tehran,\n+    CalculationMethod.turkey,\n+  ];\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    // --- Added for date picker ---\n+    _dateController.text = _dateFormat.format(_selectedDate);\n+    // --- End added ---\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return MaterialApp(\n+      theme: ThemeData.dark(),\n+      debugShowCheckedModeBanner: false,\n+      home: Scaffold(\n+        appBar: AppBar(title: const Text('Prayer Times Demo')),\n+        body: SingleChildScrollView(\n+          padding: const EdgeInsets.all(16),\n+          child: Column(\n+            children: [\n+              _buildLocationInput(),\n+              // --- Added for date picker ---\n+              _buildDateInput(),\n+              // --- End added ---\n+              _buildCalculationSettings(),\n+              ElevatedButton(\n+                onPressed: _calculateTimes,\n+                child: const Text('Calculate Prayer Times'),\n+              ),\n+              if (_prayerTimes != null) _buildResults(),\n+              SizedBox(height: 16),\n+              const Text(\n+                'This app uses the Adhan package to calculate prayer times.',\n+                textAlign: TextAlign.center,\n+              ),\n+              const SizedBox(height: 8),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  Widget _buildLocationInput() {\n+    return Card(\n+      child: Padding(\n+        padding: const EdgeInsets.all(16),\n+        child: Column(\n+          children: [\n+            TextField(\n+              controller: _latController,\n+              decoration: const InputDecoration(labelText: 'Latitude'),\n+              keyboardType: TextInputType.number,\n+            ),\n+            TextField(\n+              controller: _lngController,\n+              decoration: const InputDecoration(labelText: 'Longitude'),\n+              keyboardType: TextInputType.number,\n+            ),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  // --- Added for date picker ---\n+  Widget _buildDateInput() {\n+    return Card(\n+      child: Padding(\n+        padding: const EdgeInsets.all(16),\n+        child: TextField(\n+          controller: _dateController,\n+          decoration: const InputDecoration(\n+            labelText: 'Date',\n+            suffixIcon: Icon(Icons.calendar_today),\n+          ),\n+          readOnly: true,\n+          onTap: _selectDate,\n+        ),\n+      ),\n+    );\n+  }\n+  // --- End added ---\n+\n+  Widget _buildCalculationSettings() {\n+    return Card(\n+      child: Padding(\n+        padding: const EdgeInsets.all(16),\n+        child: Column(\n+          children: [\n+            DropdownButtonFormField<CalculationMethod>(\n+              value: _params.method,\n+              items:\n+                  _calculationMethods.map((method) {\n+                    return DropdownMenuItem<CalculationMethod>(\n+                      value: method,\n+                      child: Text(method.name),\n+                    );\n+                  }).toList(),\n+              onChanged: (method) {\n+                setState(() {\n+                  _params = method!.getParameters();\n+                });\n+              },\n+              decoration: const InputDecoration(\n+                labelText: 'Calculation Method',\n+              ),\n+            ),\n+            DropdownButtonFormField<Madhab>(\n+              value: _params.madhab,\n+              items:\n+                  Madhab.values.map((madhab) {\n+                    return DropdownMenuItem<Madhab>(\n+                      value: madhab,\n+                      child: Text(madhab == Madhab.shafi ? 'Shafi' : 'Hanafi'),\n+                    );\n+                  }).toList(),\n+              onChanged: (madhab) {\n+                setState(() {\n+                  _params.madhab = madhab!;\n+                });\n+              },\n+              decoration: const InputDecoration(labelText: 'Madhab'),\n+            ),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  Widget _buildResults() {\n+    return Card(\n+      child: Padding(\n+        padding: const EdgeInsets.all(16),\n+        child: Column(\n+          children: [\n+            _buildTimeRow('Fajr', _prayerTimes!.fajr),\n+            _buildTimeRow('Sunrise', _prayerTimes!.sunrise),\n+            _buildTimeRow('Dhuhr', _prayerTimes!.dhuhr),\n+            _buildTimeRow('Asr', _prayerTimes!.asr),\n+            _buildTimeRow('Maghrib', _prayerTimes!.maghrib),\n+            _buildTimeRow('Isha', _prayerTimes!.isha),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  Widget _buildTimeRow(String name, DateTime time) {\n+    return Padding(\n+      padding: const EdgeInsets.symmetric(vertical: 8),\n+      child: Row(\n+        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+        children: [Text(name), Text(_timeFormat.format(time))],\n+      ),\n+    );\n+  }\n+\n+  // --- Added for date picker ---\n+  Future<void> _selectDate() async {\n+    final DateTime? picked = await showDatePicker(\n+      context: context,\n+      initialDate: _selectedDate,\n+      firstDate: DateTime(2000),\n+      lastDate: DateTime(2100),\n+    );\n+    if (picked != null && picked != _selectedDate) {\n+      setState(() {\n+        _selectedDate = picked;\n+        _dateController.text = _dateFormat.format(_selectedDate);\n+      });\n+    }\n+  }\n+  // --- End added ---\n+\n+  void _calculateTimes() {\n+    try {\n+      final coordinates = Coordinates(\n+        double.parse(_latController.text),\n+        double.parse(_lngController.text),\n+      );\n+\n+      if (double.parse(_latController.text).abs() >= 60) {\n+        _params.highLatitudeRule = HighLatitudeRule.seventh_of_the_night;\n+      } else if (double.parse(_latController.text).abs() >= 45) {\n+        _params.highLatitudeRule = HighLatitudeRule.twilight_angle;\n+      }\n+\n+      setState(() {\n+        // --- Modified for date picker ---\n+        final date = DateComponents(\n+          _selectedDate.year,\n+          _selectedDate.month,\n+          _selectedDate.day,\n+        );\n+        _prayerTimes = PrayerTimes(coordinates, date, _params);\n+        // --- End modified ---\n+      });\n+    } catch (e) {\n+      showDialog(\n+        context: context,\n+        builder:\n+            (context) => AlertDialog(\n+              title: const Text('Error'),\n+              content: Text('Invalid input: ${e.toString()}'),\n+              actions: [\n+                TextButton(\n+                  onPressed: () => Navigator.pop(context),\n+                  child: const Text('OK'),\n+                ),\n+              ],\n+            ),\n+      );\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1747570900428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,18 +12,17 @@\n class _PrayerTimesDemoState extends State<PrayerTimesDemo> {\n   final TextEditingController _latController = TextEditingController(\n     text: '60.1699',\n   );\n+\n+  // 65.021545, and the longitude is 25.469885. 60.1699, 24.9384\n   final TextEditingController _lngController = TextEditingController(\n     text: '24.9384',\n   );\n-  // --- Added for date picker ---\n-  final TextEditingController _dateController = TextEditingController();\n-  DateTime _selectedDate = DateTime.now();\n-  final DateFormat _dateFormat = DateFormat('yyyy-MM-dd');\n-  // --- End added ---\n   PrayerTimes? _prayerTimes;\n   final DateFormat _timeFormat = DateFormat.jm();\n+\n+  // Using the package's example pattern for parameters\n   CalculationParameters _params =\n       CalculationMethod.muslim_world_league.getParameters();\n \n   final List<CalculationMethod> _calculationMethods = [\n@@ -41,16 +40,8 @@\n     CalculationMethod.turkey,\n   ];\n \n   @override\n-  void initState() {\n-    super.initState();\n-    // --- Added for date picker ---\n-    _dateController.text = _dateFormat.format(_selectedDate);\n-    // --- End added ---\n-  }\n-\n-  @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       theme: ThemeData.dark(),\n       debugShowCheckedModeBanner: false,\n@@ -60,11 +51,8 @@\n           padding: const EdgeInsets.all(16),\n           child: Column(\n             children: [\n               _buildLocationInput(),\n-              // --- Added for date picker ---\n-              _buildDateInput(),\n-              // --- End added ---\n               _buildCalculationSettings(),\n               ElevatedButton(\n                 onPressed: _calculateTimes,\n                 child: const Text('Calculate Prayer Times'),\n@@ -104,27 +92,8 @@\n       ),\n     );\n   }\n \n-  // --- Added for date picker ---\n-  Widget _buildDateInput() {\n-    return Card(\n-      child: Padding(\n-        padding: const EdgeInsets.all(16),\n-        child: TextField(\n-          controller: _dateController,\n-          decoration: const InputDecoration(\n-            labelText: 'Date',\n-            suffixIcon: Icon(Icons.calendar_today),\n-          ),\n-          readOnly: true,\n-          onTap: _selectDate,\n-        ),\n-      ),\n-    );\n-  }\n-  // --- End added ---\n-\n   Widget _buildCalculationSettings() {\n     return Card(\n       child: Padding(\n         padding: const EdgeInsets.all(16),\n@@ -197,25 +166,8 @@\n       ),\n     );\n   }\n \n-  // --- Added for date picker ---\n-  Future<void> _selectDate() async {\n-    final DateTime? picked = await showDatePicker(\n-      context: context,\n-      initialDate: _selectedDate,\n-      firstDate: DateTime(2000),\n-      lastDate: DateTime(2100),\n-    );\n-    if (picked != null && picked != _selectedDate) {\n-      setState(() {\n-        _selectedDate = picked;\n-        _dateController.text = _dateFormat.format(_selectedDate);\n-      });\n-    }\n-  }\n-  // --- End added ---\n-\n   void _calculateTimes() {\n     try {\n       final coordinates = Coordinates(\n         double.parse(_latController.text),\n@@ -228,16 +180,10 @@\n         _params.highLatitudeRule = HighLatitudeRule.twilight_angle;\n       }\n \n       setState(() {\n-        // --- Modified for date picker ---\n-        final date = DateComponents(\n-          _selectedDate.year,\n-          _selectedDate.month,\n-          _selectedDate.day,\n-        );\n-        _prayerTimes = PrayerTimes(coordinates, date, _params);\n-        // --- End modified ---\n+        // Using the package's recommended today() method\n+        _prayerTimes = PrayerTimes.today(coordinates, _params);\n       });\n     } catch (e) {\n       showDialog(\n         context: context,\n"
                }
            ],
            "date": 1747570357509,
            "name": "Commit-0",
            "content": ""
        }
    ]
}