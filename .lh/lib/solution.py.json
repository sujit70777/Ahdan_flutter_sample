{
    "sourceFile": "lib/solution.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1747753784648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747753806237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,17 @@\n Fajr_Angle = -18.0  # MWL Fajr angle (degrees)\n Isha_Angle = -17.0  # MWL Isha angle (degrees)\n Safety_Minutes = 2  # Safety margin for Fajr and Isha\n \n-# Location: Helsinki, Finland\n+# Locations (latitude, longitude, timezone)\n locations = [\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n+    {\"name\": \"Tromsø, Norway\", \"lat\": 69.65, \"lon\": 18.95, \"tz\": 2},\n+    {\"name\": \"Reykjavik, Iceland\", \"lat\": 64.14, \"lon\": -21.93, \"tz\": 0},\n+    {\"name\": \"Fairbanks, Alaska\", \"lat\": 64.84, \"lon\": -147.72, \"tz\": -8},\n+    {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n+    {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n+    {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n+    {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n@@ -70,9 +76,9 @@\n     solar_noon, sunrise, sunset = solar_time(lat, lon, tz, jd)\n     D, _ = solar_coordinates(jd)\n     \n     if sunrise is None or sunset is None:\n-        return None  # Handle polar night/day\n+        return None  # Handle polar night/day (not applicable for May 20)\n     \n     # Convert times to hours and minutes\n     def time_to_str(hours):\n         h = int(hours)\n@@ -97,9 +103,9 @@\n     \n     # Fajr and Isha calculation\n     if fajr_twilight or isha_twilight:\n         # Apply one-seventh of the night rule\n-        night_duration = (sunrise + 24 - sunset) % 24\n+        night_duration = (sunrise + 24 - sunset) % 24  # Handle day crossing\n         segment = night_duration / 7\n         Fajr = (sunrise - segment) % 24\n         Isha = (sunset + segment) % 24\n     else:\n@@ -109,9 +115,9 @@\n         if abs(cos_H_fajr) <= 1:\n             fajr_H = math.degrees(math.acos(cos_H_fajr))\n             Fajr = solar_noon - fajr_H / 15\n         else:\n-            Fajr = None\n+            Fajr = None  # Twilight persists, fallback to one-seventh\n         if abs(cos_H_isha) <= 1:\n             isha_H = math.degrees(math.acos(cos_H_isha))\n             Isha = solar_noon + isha_H / 15\n         else:\n@@ -135,16 +141,18 @@\n         \"Isha\": time_to_str(Isha),\n         \"Method\": \"One-Seventh\" if fajr_twilight or isha_twilight else \"MWL Standard\"\n     }\n \n-# Calculate and print prayer times\n+# Calculate and print prayer times for each location\n jd = to_julian_date(date)\n-print(f\"Prayer Times for Helsinki, Finland on {date.strftime('%Y-%m-%d')}\")\n-times = prayer_times(locations[0][\"lat\"], locations[0][\"lon\"], locations[0][\"tz\"], jd, asr_method=\"standard\")\n-if times:\n-    for prayer, time in times.items():\n-        if prayer != \"Method\":\n-            print(f\"{prayer}: {time}\")\n-        else:\n-            print(f\"Method Used: {time}\")\n-else:\n\\ No newline at end of file\n-    print(\"Unable to calculate (polar night/day).\")\n+print(f\"Prayer Times for {date.strftime('%Y-%m-%d')}\")\n+for loc in locations:\n+    print(f\"\\n{loc['name']}:\")\n+    times = prayer_times(loc[\"lat\"], loc[\"lon\"], loc[\"tz\"], jd, asr_method=\"standard\")\n+    if times:\n+        for prayer, time in times.items():\n+            if prayer != \"Method\":\n+                print(f\"{prayer}: {time}\")\n+            else:\n+                print(f\"Method Used: {time}\")\n+    else:\n+        print(\"Unable to calculate (polar night/day).\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747753860096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n     {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n     {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n     {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n     {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n+    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n"
                },
                {
                    "date": 1747753888734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n     {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n     {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n     {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n     {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n"
                },
                {
                    "date": 1747753905246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n     {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n     {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n     {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n     {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n+    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n"
                },
                {
                    "date": 1747754061896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n     {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n     {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n     {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n     {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n"
                },
                {
                    "date": 1747754276868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n Fajr_Angle = -18.0  # MWL Fajr angle (degrees)\n Isha_Angle = -17.0  # MWL Isha angle (degrees)\n Safety_Minutes = 2  # Safety margin for Fajr and Isha\n \n-# Locations (latitude, longitude, timezone)\n+# Locations\n locations = [\n     {\"name\": \"Tromsø, Norway\", \"lat\": 69.65, \"lon\": 18.95, \"tz\": 2},\n     {\"name\": \"Reykjavik, Iceland\", \"lat\": 64.14, \"lon\": -21.93, \"tz\": 0},\n     {\"name\": \"Fairbanks, Alaska\", \"lat\": 64.84, \"lon\": -147.72, \"tz\": -8},\n@@ -31,100 +31,99 @@\n     JD = math.floor(365.25 * (year + 4716)) + math.floor(30.6001 * (month + 1)) + day + B - 1524.5\n     return JD\n \n def solar_coordinates(jd):\n-    \"\"\"Calculate sun's declination and equation of time (simplified Meeus).\"\"\"\n+    \"\"\"Calculate sun's declination and equation of time.\"\"\"\n     d = jd - 2451545.0\n     g = math.radians(357.529 + 0.98560028 * d)\n     q = math.radians(280.459 + 0.98564736 * d)\n     L = q + math.radians(1.915 * math.sin(g) + 0.020 * math.sin(2 * g))\n     e = math.radians(23.439 - 0.00000036 * d)\n     RA = math.atan2(math.cos(e) * math.sin(L), math.cos(L)) / math.radians(15)\n-    D = math.asin(math.sin(e) * math.sin(L))  # Declination in radians\n-    EqT = (q / math.radians(15) - RA) * 60  # Equation of time in minutes\n+    D = math.asin(math.sin(e) * math.sin(L))\n+    EqT = (q / math.radians(15) - RA) * 60\n     return math.degrees(D), EqT\n \n def solar_time(lat, lon, tz, jd):\n     \"\"\"Calculate solar noon, sunrise, and sunset times.\"\"\"\n     D, EqT = solar_coordinates(jd)\n     D = math.radians(D)\n     lat = math.radians(lat)\n     \n-    # Solar noon\n     solar_noon = 12 - (EqT / 60) - (lon - tz * 15) / 15\n-    \n-    # Hour angle for sunrise/sunset\n     cos_H = -math.tan(lat) * math.tan(D)\n-    if abs(cos_H) > 1:  # Sun doesn't rise or set\n+    if abs(cos_H) > 1:\n         return solar_noon, None, None\n     \n     H = math.degrees(math.acos(cos_H))\n     sunrise = solar_noon - H / 15\n     sunset = solar_noon + H / 15\n     return solar_noon, sunrise, sunset\n \n def twilight_check(lat, D, solar_noon):\n-    \"\"\"Check if twilight persists for Fajr/Isha angles.\"\"\"\n+    \"\"\"Check if twilight persists for Fajr/Isha.\"\"\"\n     D = math.radians(D)\n     lat = math.radians(lat)\n-    # Solar altitude at midnight (approximate)\n     cos_H_midnight = math.sin(lat) * math.sin(D) + math.cos(lat) * math.cos(D) * math.cos(math.radians(180))\n     altitude = math.degrees(math.asin(cos_H_midnight))\n     return altitude > Fajr_Angle, altitude > Isha_Angle\n \n+def time_to_str(hours):\n+    \"\"\"Convert hours to 12-hour AM/PM format.\"\"\"\n+    hours = hours % 24  # Ensure positive time\n+    if hours < 0:\n+        hours += 24\n+    h = int(hours)\n+    m = int((hours - h) * 60)\n+    period = \"AM\" if h < 12 else \"PM\"\n+    h = h % 12\n+    if h == 0:\n+        h = 12\n+    return f\"{h:02d}:{m:02d} {period}\"\n+\n def prayer_times(lat, lon, tz, jd, asr_method=\"standard\"):\n     \"\"\"Calculate prayer times with one-seventh rule for high latitudes.\"\"\"\n     solar_noon, sunrise, sunset = solar_time(lat, lon, tz, jd)\n     D, _ = solar_coordinates(jd)\n     \n     if sunrise is None or sunset is None:\n-        return None  # Handle polar night/day (not applicable for May 20)\n+        return None\n     \n-    # Convert times to hours and minutes\n-    def time_to_str(hours):\n-        h = int(hours)\n-        m = int((hours - h) * 60)\n-        return f\"{h:02d}:{m:02d}\"\n-    \n     # Standard prayer times\n-    Dhuhr = solar_noon + 5 / 60  # 5-minute offset\n-    Maghrib = sunset\n+    Dhuhr = (solar_noon + 5 / 60) % 24\n+    Maghrib = sunset % 24\n     \n     # Asr calculation\n     lat_rad = math.radians(lat)\n     D_rad = math.radians(D)\n     shadow_factor = 1 if asr_method == \"standard\" else 2\n     cot_alpha = math.tan(abs(lat_rad - D_rad)) + math.sin(abs(lat_rad - D_rad)) / math.cos(lat_rad - D_rad) * shadow_factor\n     alpha = math.atan(1 / cot_alpha)\n     asr_H = math.degrees(math.acos(math.sin(alpha) / math.cos(lat_rad - D_rad)))\n-    Asr = solar_noon + asr_H / 15\n+    Asr = (solar_noon + asr_H / 15) % 24\n     \n     # Check twilight persistence\n     fajr_twilight, isha_twilight = twilight_check(lat, D, solar_noon)\n     \n     # Fajr and Isha calculation\n     if fajr_twilight or isha_twilight:\n-        # Apply one-seventh of the night rule\n-        night_duration = (sunrise + 24 - sunset) % 24  # Handle day crossing\n+        night_duration = ((sunrise + 24 - sunset) % 24)\n         segment = night_duration / 7\n         Fajr = (sunrise - segment) % 24\n         Isha = (sunset + segment) % 24\n     else:\n-        # Standard MWL angles\n         cos_H_fajr = (math.sin(math.radians(Fajr_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n         cos_H_isha = (math.sin(math.radians(Isha_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n+        Fajr = None\n+        Isha = None\n         if abs(cos_H_fajr) <= 1:\n             fajr_H = math.degrees(math.acos(cos_H_fajr))\n-            Fajr = solar_noon - fajr_H / 15\n-        else:\n-            Fajr = None  # Twilight persists, fallback to one-seventh\n+            Fajr = (solar_noon - fajr_H / 15) % 24\n         if abs(cos_H_isha) <= 1:\n             isha_H = math.degrees(math.acos(cos_H_isha))\n-            Isha = solar_noon + isha_H / 15\n-        else:\n-            Isha = None\n+            Isha = (solar_noon + isha_H / 15) % 24\n         if Fajr is None or Isha is None:\n-            night_duration = (sunrise + 24 - sunset) % 24\n+            night_duration = ((sunrise + 24 - sunset) % 24)\n             segment = night_duration / 7\n             Fajr = (sunrise - segment) % 24 if Fajr is None else Fajr\n             Isha = (sunset + segment) % 24 if Isha is None else Isha\n     \n@@ -141,9 +140,9 @@\n         \"Isha\": time_to_str(Isha),\n         \"Method\": \"One-Seventh\" if fajr_twilight or isha_twilight else \"MWL Standard\"\n     }\n \n-# Calculate and print prayer times for each location\n+# Run for all locations\n jd = to_julian_date(date)\n print(f\"Prayer Times for {date.strftime('%Y-%m-%d')}\")\n for loc in locations:\n     print(f\"\\n{loc['name']}:\")\n"
                },
                {
                    "date": 1747754313752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,15 +7,16 @@\n Safety_Minutes = 2  # Safety margin for Fajr and Isha\n \n # Locations\n locations = [\n-    {\"name\": \"Tromsø, Norway\", \"lat\": 69.65, \"lon\": 18.95, \"tz\": 2},\n-    {\"name\": \"Reykjavik, Iceland\", \"lat\": 64.14, \"lon\": -21.93, \"tz\": 0},\n-    {\"name\": \"Fairbanks, Alaska\", \"lat\": 64.84, \"lon\": -147.72, \"tz\": -8},\n-    {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n-    {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n-    {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n-    {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n+    # {\"name\": \"Tromsø, Norway\", \"lat\": 69.65, \"lon\": 18.95, \"tz\": 2},\n+    # {\"name\": \"Reykjavik, Iceland\", \"lat\": 64.14, \"lon\": -21.93, \"tz\": 0},\n+    # {\"name\": \"Fairbanks, Alaska\", \"lat\": 64.84, \"lon\": -147.72, \"tz\": -8},\n+    # {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n+    # {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n+    # {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n+    # {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n+    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n"
                },
                {
                    "date": 1747754410113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+import math\n+from datetime import datetime, timedelta\n+\n+# Constants\n+Fajr_Angle = -18.0  # MWL Fajr angle (degrees)\n+Isha_Angle = -17.0  # MWL Isha angle (degrees)\n+Safety_Minutes = 2  # Safety margin for Fajr and Isha\n+\n+# Locations\n+locations = [\n+    # {\"name\": \"Tromsø, Norway\", \"lat\": 69.65, \"lon\": 18.95, \"tz\": 2},\n+    # {\"name\": \"Reykjavik, Iceland\", \"lat\": 64.14, \"lon\": -21.93, \"tz\": 0},\n+    # {\"name\": \"Fairbanks, Alaska\", \"lat\": 64.84, \"lon\": -147.72, \"tz\": -8},\n+    # {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n+    # {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n+    # {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n+    # {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n+    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 2}\n+]\n+\n+# Date for calculation\n+date = datetime(2025, 5, 20)\n+\n+def to_julian_date(dt):\n+    \"\"\"Convert Gregorian date to Julian date.\"\"\"\n+    year, month, day = dt.year, dt.month, dt.day\n+    if month <= 2:\n+        year -= 1\n+        month += 12\n+    A = math.floor(year / 100)\n+    B = 2 - A + math.floor(A / 4)\n+    JD = math.floor(365.25 * (year + 4716)) + math.floor(30.6001 * (month + 1)) + day + B - 1524.5\n+    return JD\n+\n+def solar_coordinates(jd):\n+    \"\"\"Calculate sun's declination and equation of time.\"\"\"\n+    d = jd - 2451545.0\n+    g = math.radians(357.529 + 0.98560028 * d)\n+    q = math.radians(280.459 + 0.98564736 * d)\n+    L = q + math.radians(1.915 * math.sin(g) + 0.020 * math.sin(2 * g))\n+    e = math.radians(23.439 - 0.00000036 * d)\n+    RA = math.atan2(math.cos(e) * math.sin(L), math.cos(L)) / math.radians(15)\n+    D = math.asin(math.sin(e) * math.sin(L))\n+    EqT = (q / math.radians(15) - RA) * 60\n+    return math.degrees(D), EqT\n+\n+def solar_time(lat, lon, tz, jd):\n+    \"\"\"Calculate solar noon, sunrise, and sunset times.\"\"\"\n+    D, EqT = solar_coordinates(jd)\n+    D = math.radians(D)\n+    lat = math.radians(lat)\n+    \n+    solar_noon = 12 - (EqT / 60) - (lon - tz * 15) / 15\n+    cos_H = -math.tan(lat) * math.tan(D)\n+    if abs(cos_H) > 1:\n+        return solar_noon, None, None\n+    \n+    H = math.degrees(math.acos(cos_H))\n+    sunrise = solar_noon - H / 15\n+    sunset = solar_noon + H / 15\n+    return solar_noon, sunrise, sunset\n+\n+def twilight_check(lat, D, solar_noon):\n+    \"\"\"Check if twilight persists for Fajr/Isha.\"\"\"\n+    D = math.radians(D)\n+    lat = math.radians(lat)\n+    cos_H_midnight = math.sin(lat) * math.sin(D) + math.cos(lat) * math.cos(D) * math.cos(math.radians(180))\n+    altitude = math.degrees(math.asin(cos_H_midnight))\n+    return altitude > Fajr_Angle, altitude > Isha_Angle\n+\n+def time_to_str(hours):\n+    \"\"\"Convert hours to 12-hour AM/PM format.\"\"\"\n+    hours = hours % 24  # Ensure positive time\n+    if hours < 0:\n+        hours += 24\n+    h = int(hours)\n+    m = int((hours - h) * 60)\n+    period = \"AM\" if h < 12 else \"PM\"\n+    h = h % 12\n+    if h == 0:\n+        h = 12\n+    return f\"{h:02d}:{m:02d} {period}\"\n+\n+def prayer_times(lat, lon, tz, jd, asr_method=\"standard\"):\n+    \"\"\"Calculate prayer times with one-seventh rule for high latitudes.\"\"\"\n+    solar_noon, sunrise, sunset = solar_time(lat, lon, tz, jd)\n+    D, _ = solar_coordinates(jd)\n+    \n+    if sunrise is None or sunset is None:\n+        return None\n+    \n+    # Standard prayer times\n+    Dhuhr = (solar_noon + 5 / 60) % 24\n+    Maghrib = sunset % 24\n+    \n+    # Asr calculation\n+    lat_rad = math.radians(lat)\n+    D_rad = math.radians(D)\n+    shadow_factor = 1 if asr_method == \"standard\" else 2\n+    cot_alpha = math.tan(abs(lat_rad - D_rad)) + math.sin(abs(lat_rad - D_rad)) / math.cos(lat_rad - D_rad) * shadow_factor\n+    alpha = math.atan(1 / cot_alpha)\n+    asr_H = math.degrees(math.acos(math.sin(alpha) / math.cos(lat_rad - D_rad)))\n+    Asr = (solar_noon + asr_H / 15) % 24\n+    \n+    # Check twilight persistence\n+    fajr_twilight, isha_twilight = twilight_check(lat, D, solar_noon)\n+    \n+    # Fajr and Isha calculation\n+    if fajr_twilight or isha_twilight:\n+        night_duration = ((sunrise + 24 - sunset) % 24)\n+        segment = night_duration / 7\n+        Fajr = (sunrise - segment) % 24\n+        Isha = (sunset + segment) % 24\n+    else:\n+        cos_H_fajr = (math.sin(math.radians(Fajr_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n+        cos_H_isha = (math.sin(math.radians(Isha_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n+        Fajr = None\n+        Isha = None\n+        if abs(cos_H_fajr) <= 1:\n+            fajr_H = math.degrees(math.acos(cos_H_fajr))\n+            Fajr = (solar_noon - fajr_H / 15) % 24\n+        if abs(cos_H_isha) <= 1:\n+            isha_H = math.degrees(math.acos(cos_H_isha))\n+            Isha = (solar_noon + isha_H / 15) % 24\n+        if Fajr is None or Isha is None:\n+            night_duration = ((sunrise + 24 - sunset) % 24)\n+            segment = night_duration / 7\n+            Fajr = (sunrise - segment) % 24 if Fajr is None else Fajr\n+            Isha = (sunset + segment) % 24 if Isha is None else Isha\n+    \n+    # Apply safety margins\n+    Fajr = (Fajr + Safety_Minutes / 60) % 24\n+    Isha = (Isha + Safety_Minutes / 60) % 24\n+    \n+    return {\n+        \"Fajr\": time_to_str(Fajr),\n+        \"Sunrise\": time_to_str(sunrise),\n+        \"Dhuhr\": time_to_str(Dhuhr),\n+        \"Asr\": time_to_str(Asr),\n+        \"Maghrib\": time_to_str(Maghrib),\n+        \"Isha\": time_to_str(Isha),\n+        \"Method\": \"One-Seventh\" if fajr_twilight or isha_twilight else \"MWL Standard\"\n+    }\n+\n+# Run for all locations\n+jd = to_julian_date(date)\n+print(f\"Prayer Times for {date.strftime('%Y-%m-%d')}\")\n+for loc in locations:\n+    print(f\"\\n{loc['name']}:\")\n+    times = prayer_times(loc[\"lat\"], loc[\"lon\"], loc[\"tz\"], jd, asr_method=\"standard\")\n+    if times:\n+        for prayer, time in times.items():\n+            if prayer != \"Method\":\n+                print(f\"{prayer}: {time}\")\n+            else:\n+                print(f\"Method Used: {time}\")\n+    else:\n+        print(\"Unable to calculate (polar night/day).\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747754425361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     # {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n     # {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n     # {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n     # {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 2}\n+    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 4}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n@@ -154,163 +154,5 @@\n                 print(f\"{prayer}: {time}\")\n             else:\n                 print(f\"Method Used: {time}\")\n     else:\n-        print(\"Unable to calculate (polar night/day).\")\n-import math\n-from datetime import datetime, timedelta\n-\n-# Constants\n-Fajr_Angle = -18.0  # MWL Fajr angle (degrees)\n-Isha_Angle = -17.0  # MWL Isha angle (degrees)\n-Safety_Minutes = 2  # Safety margin for Fajr and Isha\n-\n-# Locations\n-locations = [\n-    # {\"name\": \"Tromsø, Norway\", \"lat\": 69.65, \"lon\": 18.95, \"tz\": 2},\n-    # {\"name\": \"Reykjavik, Iceland\", \"lat\": 64.14, \"lon\": -21.93, \"tz\": 0},\n-    # {\"name\": \"Fairbanks, Alaska\", \"lat\": 64.84, \"lon\": -147.72, \"tz\": -8},\n-    # {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n-    # {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n-    # {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n-    # {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n-]\n-\n-# Date for calculation\n-date = datetime(2025, 5, 20)\n-\n-def to_julian_date(dt):\n-    \"\"\"Convert Gregorian date to Julian date.\"\"\"\n-    year, month, day = dt.year, dt.month, dt.day\n-    if month <= 2:\n-        year -= 1\n-        month += 12\n-    A = math.floor(year / 100)\n-    B = 2 - A + math.floor(A / 4)\n-    JD = math.floor(365.25 * (year + 4716)) + math.floor(30.6001 * (month + 1)) + day + B - 1524.5\n-    return JD\n-\n-def solar_coordinates(jd):\n-    \"\"\"Calculate sun's declination and equation of time.\"\"\"\n-    d = jd - 2451545.0\n-    g = math.radians(357.529 + 0.98560028 * d)\n-    q = math.radians(280.459 + 0.98564736 * d)\n-    L = q + math.radians(1.915 * math.sin(g) + 0.020 * math.sin(2 * g))\n-    e = math.radians(23.439 - 0.00000036 * d)\n-    RA = math.atan2(math.cos(e) * math.sin(L), math.cos(L)) / math.radians(15)\n-    D = math.asin(math.sin(e) * math.sin(L))\n-    EqT = (q / math.radians(15) - RA) * 60\n-    return math.degrees(D), EqT\n-\n-def solar_time(lat, lon, tz, jd):\n-    \"\"\"Calculate solar noon, sunrise, and sunset times.\"\"\"\n-    D, EqT = solar_coordinates(jd)\n-    D = math.radians(D)\n-    lat = math.radians(lat)\n-    \n-    solar_noon = 12 - (EqT / 60) - (lon - tz * 15) / 15\n-    cos_H = -math.tan(lat) * math.tan(D)\n-    if abs(cos_H) > 1:\n-        return solar_noon, None, None\n-    \n-    H = math.degrees(math.acos(cos_H))\n-    sunrise = solar_noon - H / 15\n-    sunset = solar_noon + H / 15\n-    return solar_noon, sunrise, sunset\n-\n-def twilight_check(lat, D, solar_noon):\n-    \"\"\"Check if twilight persists for Fajr/Isha.\"\"\"\n-    D = math.radians(D)\n-    lat = math.radians(lat)\n-    cos_H_midnight = math.sin(lat) * math.sin(D) + math.cos(lat) * math.cos(D) * math.cos(math.radians(180))\n-    altitude = math.degrees(math.asin(cos_H_midnight))\n-    return altitude > Fajr_Angle, altitude > Isha_Angle\n-\n-def time_to_str(hours):\n-    \"\"\"Convert hours to 12-hour AM/PM format.\"\"\"\n-    hours = hours % 24  # Ensure positive time\n-    if hours < 0:\n-        hours += 24\n-    h = int(hours)\n-    m = int((hours - h) * 60)\n-    period = \"AM\" if h < 12 else \"PM\"\n-    h = h % 12\n-    if h == 0:\n-        h = 12\n-    return f\"{h:02d}:{m:02d} {period}\"\n-\n-def prayer_times(lat, lon, tz, jd, asr_method=\"standard\"):\n-    \"\"\"Calculate prayer times with one-seventh rule for high latitudes.\"\"\"\n-    solar_noon, sunrise, sunset = solar_time(lat, lon, tz, jd)\n-    D, _ = solar_coordinates(jd)\n-    \n-    if sunrise is None or sunset is None:\n-        return None\n-    \n-    # Standard prayer times\n-    Dhuhr = (solar_noon + 5 / 60) % 24\n-    Maghrib = sunset % 24\n-    \n-    # Asr calculation\n-    lat_rad = math.radians(lat)\n-    D_rad = math.radians(D)\n-    shadow_factor = 1 if asr_method == \"standard\" else 2\n-    cot_alpha = math.tan(abs(lat_rad - D_rad)) + math.sin(abs(lat_rad - D_rad)) / math.cos(lat_rad - D_rad) * shadow_factor\n-    alpha = math.atan(1 / cot_alpha)\n-    asr_H = math.degrees(math.acos(math.sin(alpha) / math.cos(lat_rad - D_rad)))\n-    Asr = (solar_noon + asr_H / 15) % 24\n-    \n-    # Check twilight persistence\n-    fajr_twilight, isha_twilight = twilight_check(lat, D, solar_noon)\n-    \n-    # Fajr and Isha calculation\n-    if fajr_twilight or isha_twilight:\n-        night_duration = ((sunrise + 24 - sunset) % 24)\n-        segment = night_duration / 7\n-        Fajr = (sunrise - segment) % 24\n-        Isha = (sunset + segment) % 24\n-    else:\n-        cos_H_fajr = (math.sin(math.radians(Fajr_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n-        cos_H_isha = (math.sin(math.radians(Isha_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n-        Fajr = None\n-        Isha = None\n-        if abs(cos_H_fajr) <= 1:\n-            fajr_H = math.degrees(math.acos(cos_H_fajr))\n-            Fajr = (solar_noon - fajr_H / 15) % 24\n-        if abs(cos_H_isha) <= 1:\n-            isha_H = math.degrees(math.acos(cos_H_isha))\n-            Isha = (solar_noon + isha_H / 15) % 24\n-        if Fajr is None or Isha is None:\n-            night_duration = ((sunrise + 24 - sunset) % 24)\n-            segment = night_duration / 7\n-            Fajr = (sunrise - segment) % 24 if Fajr is None else Fajr\n-            Isha = (sunset + segment) % 24 if Isha is None else Isha\n-    \n-    # Apply safety margins\n-    Fajr = (Fajr + Safety_Minutes / 60) % 24\n-    Isha = (Isha + Safety_Minutes / 60) % 24\n-    \n-    return {\n-        \"Fajr\": time_to_str(Fajr),\n-        \"Sunrise\": time_to_str(sunrise),\n-        \"Dhuhr\": time_to_str(Dhuhr),\n-        \"Asr\": time_to_str(Asr),\n-        \"Maghrib\": time_to_str(Maghrib),\n-        \"Isha\": time_to_str(Isha),\n-        \"Method\": \"One-Seventh\" if fajr_twilight or isha_twilight else \"MWL Standard\"\n-    }\n-\n-# Run for all locations\n-jd = to_julian_date(date)\n-print(f\"Prayer Times for {date.strftime('%Y-%m-%d')}\")\n-for loc in locations:\n-    print(f\"\\n{loc['name']}:\")\n-    times = prayer_times(loc[\"lat\"], loc[\"lon\"], loc[\"tz\"], jd, asr_method=\"standard\")\n-    if times:\n-        for prayer, time in times.items():\n-            if prayer != \"Method\":\n-                print(f\"{prayer}: {time}\")\n-            else:\n-                print(f\"Method Used: {time}\")\n-    else:\n         print(\"Unable to calculate (polar night/day).\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747754451254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     # {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n     # {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n     # {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n     # {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 4}\n+    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 2.5}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n"
                },
                {
                    "date": 1747754463899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     # {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n     # {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n     # {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n     # {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 2.5}\n+    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3.5}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n"
                },
                {
                    "date": 1747754949353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     # {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n     # {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n     # {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n     # {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3.5}\n+    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n ]\n \n # Date for calculation\n date = datetime(2025, 5, 20)\n"
                },
                {
                    "date": 1747758598994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,158 +1,85 @@\n+import ephem\n+from datetime import datetime, timedelta\n import math\n-from datetime import datetime, timedelta\n \n-# Constants\n-Fajr_Angle = -18.0  # MWL Fajr angle (degrees)\n-Isha_Angle = -17.0  # MWL Isha angle (degrees)\n-Safety_Minutes = 2  # Safety margin for Fajr and Isha\n+# Set up observer for Helsinki\n+observer = ephem.Observer()\n+observer.lat = '60.17'  # Latitude\n+observer.lon = '24.94'  # Longitude\n+observer.elevation = 0  # Sea level\n+observer.pressure = 0   # No atmospheric refraction\n+observer.horizon = '0'  # Default horizon\n \n-# Locations\n-locations = [\n-    # {\"name\": \"Tromsø, Norway\", \"lat\": 69.65, \"lon\": 18.95, \"tz\": 2},\n-    # {\"name\": \"Reykjavik, Iceland\", \"lat\": 64.14, \"lon\": -21.93, \"tz\": 0},\n-    # {\"name\": \"Fairbanks, Alaska\", \"lat\": 64.84, \"lon\": -147.72, \"tz\": -8},\n-    # {\"name\": \"Whitehorse, Canada\", \"lat\": 60.72, \"lon\": -135.05, \"tz\": -7},\n-    # {\"name\": \"Nuuk, Greenland\", \"lat\": 64.18, \"lon\": -51.72, \"tz\": -2},\n-    # {\"name\": \"Kiruna, Sweden\", \"lat\": 67.86, \"lon\": 20.23, \"tz\": 2},\n-    # {\"name\": \"Murmansk, Russia\", \"lat\": 68.97, \"lon\": 33.08, \"tz\": 3},\n-    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n-]\n+# Start from May 19, 2025, 12:00 UTC to capture events for May 20 in EEST\n+observer.date = '2025/05/19 12:00:00'\n \n-# Date for calculation\n-date = datetime(2025, 5, 20)\n+# Sun object\n+sun = ephem.Sun()\n \n-def to_julian_date(dt):\n-    \"\"\"Convert Gregorian date to Julian date.\"\"\"\n-    year, month, day = dt.year, dt.month, dt.day\n-    if month <= 2:\n-        year -= 1\n-        month += 12\n-    A = math.floor(year / 100)\n-    B = 2 - A + math.floor(A / 4)\n-    JD = math.floor(365.25 * (year + 4716)) + math.floor(30.6001 * (month + 1)) + day + B - 1524.5\n-    return JD\n+# Function to calculate next event and update observer date\n+def next_event(observer, body, event_type, **kwargs):\n+    if event_type == 'rising':\n+        event_time = observer.next_rising(body, **kwargs).datetime()\n+    elif event_type == 'setting':\n+        event_time = observer.next_setting(body, **kwargs).datetime()\n+    elif event_type == 'transit':\n+        event_time = observer.next_transit(body).datetime()\n+    observer.date = event_time\n+    return event_time\n \n-def solar_coordinates(jd):\n-    \"\"\"Calculate sun's declination and equation of time.\"\"\"\n-    d = jd - 2451545.0\n-    g = math.radians(357.529 + 0.98560028 * d)\n-    q = math.radians(280.459 + 0.98564736 * d)\n-    L = q + math.radians(1.915 * math.sin(g) + 0.020 * math.sin(2 * g))\n-    e = math.radians(23.439 - 0.00000036 * d)\n-    RA = math.atan2(math.cos(e) * math.sin(L), math.cos(L)) / math.radians(15)\n-    D = math.asin(math.sin(e) * math.sin(L))\n-    EqT = (q / math.radians(15) - RA) * 60\n-    return math.degrees(D), EqT\n+# Isha: Sun at -17° after sunset (MWL method)\n+observer.horizon = '-17'\n+isha_utc = next_event(observer, sun, 'setting', use_center=True)\n \n-def solar_time(lat, lon, tz, jd):\n-    \"\"\"Calculate solar noon, sunrise, and sunset times.\"\"\"\n-    D, EqT = solar_coordinates(jd)\n-    D = math.radians(D)\n-    lat = math.radians(lat)\n-    \n-    solar_noon = 12 - (EqT / 60) - (lon - tz * 15) / 15\n-    cos_H = -math.tan(lat) * math.tan(D)\n-    if abs(cos_H) > 1:\n-        return solar_noon, None, None\n-    \n-    H = math.degrees(math.acos(cos_H))\n-    sunrise = solar_noon - H / 15\n-    sunset = solar_noon + H / 15\n-    return solar_noon, sunrise, sunset\n+# Fajr: Sun at -18° before sunrise (MWL method)\n+observer.horizon = '-18'\n+fajr_utc = next_event(observer, sun, 'rising', use_center=True)\n \n-def twilight_check(lat, D, solar_noon):\n-    \"\"\"Check if twilight persists for Fajr/Isha.\"\"\"\n-    D = math.radians(D)\n-    lat = math.radians(lat)\n-    cos_H_midnight = math.sin(lat) * math.sin(D) + math.cos(lat) * math.cos(D) * math.cos(math.radians(180))\n-    altitude = math.degrees(math.asin(cos_H_midnight))\n-    return altitude > Fajr_Angle, altitude > Isha_Angle\n+# Sunrise: Sun at 0°\n+observer.horizon = '0'\n+sunrise_utc = next_event(observer, sun, 'rising')\n \n-def time_to_str(hours):\n-    \"\"\"Convert hours to 12-hour AM/PM format.\"\"\"\n-    hours = hours % 24  # Ensure positive time\n-    if hours < 0:\n-        hours += 24\n-    h = int(hours)\n-    m = int((hours - h) * 60)\n-    period = \"AM\" if h < 12 else \"PM\"\n-    h = h % 12\n-    if h == 0:\n-        h = 12\n-    return f\"{h:02d}:{m:02d} {period}\"\n+# Solar noon\n+solar_noon_utc = next_event(observer, sun, 'transit')\n \n-def prayer_times(lat, lon, tz, jd, asr_method=\"standard\"):\n-    \"\"\"Calculate prayer times with one-seventh rule for high latitudes.\"\"\"\n-    solar_noon, sunrise, sunset = solar_time(lat, lon, tz, jd)\n-    D, _ = solar_coordinates(jd)\n-    \n-    if sunrise is None or sunset is None:\n-        return None\n-    \n-    # Standard prayer times\n-    Dhuhr = (solar_noon + 5 / 60) % 24\n-    Maghrib = sunset % 24\n-    \n-    # Asr calculation\n-    lat_rad = math.radians(lat)\n-    D_rad = math.radians(D)\n-    shadow_factor = 1 if asr_method == \"standard\" else 2\n-    cot_alpha = math.tan(abs(lat_rad - D_rad)) + math.sin(abs(lat_rad - D_rad)) / math.cos(lat_rad - D_rad) * shadow_factor\n-    alpha = math.atan(1 / cot_alpha)\n-    asr_H = math.degrees(math.acos(math.sin(alpha) / math.cos(lat_rad - D_rad)))\n-    Asr = (solar_noon + asr_H / 15) % 24\n-    \n-    # Check twilight persistence\n-    fajr_twilight, isha_twilight = twilight_check(lat, D, solar_noon)\n-    \n-    # Fajr and Isha calculation\n-    if fajr_twilight or isha_twilight:\n-        night_duration = ((sunrise + 24 - sunset) % 24)\n-        segment = night_duration / 7\n-        Fajr = (sunrise - segment) % 24\n-        Isha = (sunset + segment) % 24\n-    else:\n-        cos_H_fajr = (math.sin(math.radians(Fajr_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n-        cos_H_isha = (math.sin(math.radians(Isha_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n-        Fajr = None\n-        Isha = None\n-        if abs(cos_H_fajr) <= 1:\n-            fajr_H = math.degrees(math.acos(cos_H_fajr))\n-            Fajr = (solar_noon - fajr_H / 15) % 24\n-        if abs(cos_H_isha) <= 1:\n-            isha_H = math.degrees(math.acos(cos_H_isha))\n-            Isha = (solar_noon + isha_H / 15) % 24\n\\ No newline at end of file\n-        if Fajr is None or Isha is None:\n-            night_duration = ((sunrise + 24 - sunset) % 24)\n-            segment = night_duration / 7\n-            Fajr = (sunrise - segment) % 24 if Fajr is None else Fajr\n-            Isha = (sunset + segment) % 24 if Isha is None else Isha\n-    \n-    # Apply safety margins\n-    Fajr = (Fajr + Safety_Minutes / 60) % 24\n-    Isha = (Isha + Safety_Minutes / 60) % 24\n-    \n-    return {\n-        \"Fajr\": time_to_str(Fajr),\n-        \"Sunrise\": time_to_str(sunrise),\n-        \"Dhuhr\": time_to_str(Dhuhr),\n-        \"Asr\": time_to_str(Asr),\n-        \"Maghrib\": time_to_str(Maghrib),\n-        \"Isha\": time_to_str(Isha),\n-        \"Method\": \"One-Seventh\" if fajr_twilight or isha_twilight else \"MWL Standard\"\n-    }\n+# Sunset: Sun at 0°\n+sunset_utc = next_event(observer, sun, 'setting')\n \n-# Run for all locations\n-jd = to_julian_date(date)\n-print(f\"Prayer Times for {date.strftime('%Y-%m-%d')}\")\n-for loc in locations:\n-    print(f\"\\n{loc['name']}:\")\n-    times = prayer_times(loc[\"lat\"], loc[\"lon\"], loc[\"tz\"], jd, asr_method=\"standard\")\n-    if times:\n-        for prayer, time in times.items():\n-            if prayer != \"Method\":\n-                print(f\"{prayer}: {time}\")\n-            else:\n-                print(f\"Method Used: {time}\")\n-    else:\n-        print(\"Unable to calculate (polar night/day).\")\n+# Dhuhr: 5 minutes after solar noon\n+dhuhr_utc = solar_noon_utc + timedelta(minutes=5)\n+\n+# Asr: Standard shadow ratio of 1\n+sun.compute(solar_noon_utc)\n+declination = sun.dec\n+latitude = math.radians(60.17)\n+shadow_ratio = 1\n+phi = latitude\n+delta = declination\n+tan_phi_delta = math.tan(abs(phi - delta))\n+target = math.atan(1 / (shadow_ratio + tan_phi_delta))\n+sin_target = math.sin(target)\n+cos_H = (sin_target - math.sin(phi) * math.sin(delta)) / (math.cos(phi) * math.cos(delta))\n+H = math.acos(cos_H)\n+asr_utc = solar_noon_utc + timedelta(hours=H / 15)\n+\n+# Adjust to EEST (UTC+3)\n+local_offset = timedelta(hours=3)\n+fajr_local = fajr_utc + local_offset\n+sunrise_local = sunrise_utc + local_offset\n+dhuhr_local = dhuhr_utc + local_offset\n+asr_local = asr_utc + local_offset\n+sunset_local = sunset_utc + local_offset\n+isha_local = isha_utc + local_offset\n+\n+# Format time in 12-hour format\n+def format_time(dt):\n+    return dt.strftime('%I:%M %p')\n+\n+# Display prayer times\n+print(\"Prayer Times for Helsinki, Finland on May 20, 2025 (EEST):\")\n+print(f\"Fajr: {format_time(fajr_local)}\")\n+print(f\"Sunrise: {format_time(sunrise_local)}\")\n+print(f\"Dhuhr: {format_time(dhuhr_local)}\")\n+print(f\"Asr: {format_time(asr_local)}\")\n+print(f\"Maghrib: {format_time(sunset_local)}\")\n+print(f\"Isha: {format_time(isha_local)}\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747758954928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,53 +3,56 @@\n import math\n \n # Set up observer for Helsinki\n observer = ephem.Observer()\n-observer.lat = '60.17'  # Latitude\n-observer.lon = '24.94'  # Longitude\n+observer.lat = '60.17'  # Latitude of Helsinki\n+observer.lon = '24.94'  # Longitude of Helsinki\n observer.elevation = 0  # Sea level\n-observer.pressure = 0   # No atmospheric refraction\n-observer.horizon = '0'  # Default horizon\n+observer.pressure = 0   # Disable atmospheric refraction\n+observer.horizon = '0'  # Standard horizon for sunrise/sunset\n \n-# Start from May 19, 2025, 12:00 UTC to capture events for May 20 in EEST\n+# Set date to May 19, 2025, 12:00 UTC to capture May 20 events\n observer.date = '2025/05/19 12:00:00'\n \n # Sun object\n sun = ephem.Sun()\n \n-# Function to calculate next event and update observer date\n-def next_event(observer, body, event_type, **kwargs):\n-    if event_type == 'rising':\n-        event_time = observer.next_rising(body, **kwargs).datetime()\n-    elif event_type == 'setting':\n-        event_time = observer.next_setting(body, **kwargs).datetime()\n-    elif event_type == 'transit':\n-        event_time = observer.next_transit(body).datetime()\n-    observer.date = event_time\n-    return event_time\n+# Calculate sunset and sunrise (horizon = 0 degrees)\n+sunset_utc = observer.next_setting(sun).datetime()\n+observer.date = sunset_utc\n+sunrise_utc = observer.next_rising(sun).datetime()\n \n-# Isha: Sun at -17° after sunset (MWL method)\n-observer.horizon = '-17'\n-isha_utc = next_event(observer, sun, 'setting', use_center=True)\n+# Calculate night duration in hours\n+night_duration = (sunrise_utc - sunset_utc).total_seconds() / 3600.0\n \n-# Fajr: Sun at -18° before sunrise (MWL method)\n-observer.horizon = '-18'\n-fajr_utc = next_event(observer, sun, 'rising', use_center=True)\n+# Find midpoint of the night (approximate time of minimum altitude)\n+midpoint_utc = sunset_utc + timedelta(hours=night_duration / 2)\n+observer.date = midpoint_utc\n+sun.compute(observer)\n+min_altitude = math.degrees(sun.alt)  # Convert radians to degrees\n \n-# Sunrise: Sun at 0°\n-observer.horizon = '0'\n-sunrise_utc = next_event(observer, sun, 'rising')\n+# Define prayer times\n+safety_margin = timedelta(minutes=2)  # 2-minute buffer\n \n-# Solar noon\n-solar_noon_utc = next_event(observer, sun, 'transit')\n+if min_altitude > -17:\n+    # Use \"One-Seventh\" method for persistent twilight\n+    segment = night_duration / 7\n+    isha_utc = sunset_utc + timedelta(hours=segment) + safety_margin\n+    fajr_utc = sunrise_utc - timedelta(hours=segment) + safety_margin\n+else:\n+    # Use standard method\n+    observer.horizon = '-17'  # For Isha\n+    isha_utc = observer.next_setting(sun, use_center=True).datetime() + safety_margin\n+    observer.horizon = '-18'  # For Fajr\n+    observer.date = sunrise_utc\n+    fajr_utc = observer.previous_rising(sun, start=sunrise_utc, use_center=True).datetime() + safety_margin\n \n-# Sunset: Sun at 0°\n-sunset_utc = next_event(observer, sun, 'setting')\n+# Calculate solar noon for Dhuhr\n+observer.date = sunset_utc\n+solar_noon_utc = observer.next_transit(sun).datetime()\n+dhuhr_utc = solar_noon_utc + timedelta(minutes=5)  # 5 minutes after noon\n \n-# Dhuhr: 5 minutes after solar noon\n-dhuhr_utc = solar_noon_utc + timedelta(minutes=5)\n-\n-# Asr: Standard shadow ratio of 1\n+# Calculate Asr (shadow ratio = 1)\n sun.compute(solar_noon_utc)\n declination = sun.dec\n latitude = math.radians(60.17)\n shadow_ratio = 1\n@@ -61,25 +64,28 @@\n cos_H = (sin_target - math.sin(phi) * math.sin(delta)) / (math.cos(phi) * math.cos(delta))\n H = math.acos(cos_H)\n asr_utc = solar_noon_utc + timedelta(hours=H / 15)\n \n-# Adjust to EEST (UTC+3)\n+# Maghrib is sunset\n+maghrib_utc = sunset_utc + safety_margin\n+\n+# Convert to EEST (UTC+3)\n local_offset = timedelta(hours=3)\n fajr_local = fajr_utc + local_offset\n sunrise_local = sunrise_utc + local_offset\n dhuhr_local = dhuhr_utc + local_offset\n asr_local = asr_utc + local_offset\n-sunset_local = sunset_utc + local_offset\n+maghrib_local = maghrib_utc + local_offset\n isha_local = isha_utc + local_offset\n \n # Format time in 12-hour format\n def format_time(dt):\n-    return dt.strftime('%I:%M %p')\n+    return dt.strftime('%I:%M %p').lstrip('0')\n \n # Display prayer times\n print(\"Prayer Times for Helsinki, Finland on May 20, 2025 (EEST):\")\n print(f\"Fajr: {format_time(fajr_local)}\")\n print(f\"Sunrise: {format_time(sunrise_local)}\")\n print(f\"Dhuhr: {format_time(dhuhr_local)}\")\n print(f\"Asr: {format_time(asr_local)}\")\n-print(f\"Maghrib: {format_time(sunset_local)}\")\n+print(f\"Maghrib: {format_time(maghrib_local)}\")\n print(f\"Isha: {format_time(isha_local)}\")\n\\ No newline at end of file\n"
                }
            ],
            "date": 1747753784648,
            "name": "Commit-0",
            "content": "import math\nfrom datetime import datetime, timedelta\n\n# Constants\nFajr_Angle = -18.0  # MWL Fajr angle (degrees)\nIsha_Angle = -17.0  # MWL Isha angle (degrees)\nSafety_Minutes = 2  # Safety margin for Fajr and Isha\n\n# Location: Helsinki, Finland\nlocations = [\n    {\"name\": \"Helsinki, Finland\", \"lat\": 60.17, \"lon\": 24.94, \"tz\": 3}\n]\n\n# Date for calculation\ndate = datetime(2025, 5, 20)\n\ndef to_julian_date(dt):\n    \"\"\"Convert Gregorian date to Julian date.\"\"\"\n    year, month, day = dt.year, dt.month, dt.day\n    if month <= 2:\n        year -= 1\n        month += 12\n    A = math.floor(year / 100)\n    B = 2 - A + math.floor(A / 4)\n    JD = math.floor(365.25 * (year + 4716)) + math.floor(30.6001 * (month + 1)) + day + B - 1524.5\n    return JD\n\ndef solar_coordinates(jd):\n    \"\"\"Calculate sun's declination and equation of time (simplified Meeus).\"\"\"\n    d = jd - 2451545.0\n    g = math.radians(357.529 + 0.98560028 * d)\n    q = math.radians(280.459 + 0.98564736 * d)\n    L = q + math.radians(1.915 * math.sin(g) + 0.020 * math.sin(2 * g))\n    e = math.radians(23.439 - 0.00000036 * d)\n    RA = math.atan2(math.cos(e) * math.sin(L), math.cos(L)) / math.radians(15)\n    D = math.asin(math.sin(e) * math.sin(L))  # Declination in radians\n    EqT = (q / math.radians(15) - RA) * 60  # Equation of time in minutes\n    return math.degrees(D), EqT\n\ndef solar_time(lat, lon, tz, jd):\n    \"\"\"Calculate solar noon, sunrise, and sunset times.\"\"\"\n    D, EqT = solar_coordinates(jd)\n    D = math.radians(D)\n    lat = math.radians(lat)\n    \n    # Solar noon\n    solar_noon = 12 - (EqT / 60) - (lon - tz * 15) / 15\n    \n    # Hour angle for sunrise/sunset\n    cos_H = -math.tan(lat) * math.tan(D)\n    if abs(cos_H) > 1:  # Sun doesn't rise or set\n        return solar_noon, None, None\n    \n    H = math.degrees(math.acos(cos_H))\n    sunrise = solar_noon - H / 15\n    sunset = solar_noon + H / 15\n    return solar_noon, sunrise, sunset\n\ndef twilight_check(lat, D, solar_noon):\n    \"\"\"Check if twilight persists for Fajr/Isha angles.\"\"\"\n    D = math.radians(D)\n    lat = math.radians(lat)\n    # Solar altitude at midnight (approximate)\n    cos_H_midnight = math.sin(lat) * math.sin(D) + math.cos(lat) * math.cos(D) * math.cos(math.radians(180))\n    altitude = math.degrees(math.asin(cos_H_midnight))\n    return altitude > Fajr_Angle, altitude > Isha_Angle\n\ndef prayer_times(lat, lon, tz, jd, asr_method=\"standard\"):\n    \"\"\"Calculate prayer times with one-seventh rule for high latitudes.\"\"\"\n    solar_noon, sunrise, sunset = solar_time(lat, lon, tz, jd)\n    D, _ = solar_coordinates(jd)\n    \n    if sunrise is None or sunset is None:\n        return None  # Handle polar night/day\n    \n    # Convert times to hours and minutes\n    def time_to_str(hours):\n        h = int(hours)\n        m = int((hours - h) * 60)\n        return f\"{h:02d}:{m:02d}\"\n    \n    # Standard prayer times\n    Dhuhr = solar_noon + 5 / 60  # 5-minute offset\n    Maghrib = sunset\n    \n    # Asr calculation\n    lat_rad = math.radians(lat)\n    D_rad = math.radians(D)\n    shadow_factor = 1 if asr_method == \"standard\" else 2\n    cot_alpha = math.tan(abs(lat_rad - D_rad)) + math.sin(abs(lat_rad - D_rad)) / math.cos(lat_rad - D_rad) * shadow_factor\n    alpha = math.atan(1 / cot_alpha)\n    asr_H = math.degrees(math.acos(math.sin(alpha) / math.cos(lat_rad - D_rad)))\n    Asr = solar_noon + asr_H / 15\n    \n    # Check twilight persistence\n    fajr_twilight, isha_twilight = twilight_check(lat, D, solar_noon)\n    \n    # Fajr and Isha calculation\n    if fajr_twilight or isha_twilight:\n        # Apply one-seventh of the night rule\n        night_duration = (sunrise + 24 - sunset) % 24\n        segment = night_duration / 7\n        Fajr = (sunrise - segment) % 24\n        Isha = (sunset + segment) % 24\n    else:\n        # Standard MWL angles\n        cos_H_fajr = (math.sin(math.radians(Fajr_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n        cos_H_isha = (math.sin(math.radians(Isha_Angle)) - math.sin(lat_rad) * math.sin(D_rad)) / (math.cos(lat_rad) * math.cos(D_rad))\n        if abs(cos_H_fajr) <= 1:\n            fajr_H = math.degrees(math.acos(cos_H_fajr))\n            Fajr = solar_noon - fajr_H / 15\n        else:\n            Fajr = None\n        if abs(cos_H_isha) <= 1:\n            isha_H = math.degrees(math.acos(cos_H_isha))\n            Isha = solar_noon + isha_H / 15\n        else:\n            Isha = None\n        if Fajr is None or Isha is None:\n            night_duration = (sunrise + 24 - sunset) % 24\n            segment = night_duration / 7\n            Fajr = (sunrise - segment) % 24 if Fajr is None else Fajr\n            Isha = (sunset + segment) % 24 if Isha is None else Isha\n    \n    # Apply safety margins\n    Fajr = (Fajr + Safety_Minutes / 60) % 24\n    Isha = (Isha + Safety_Minutes / 60) % 24\n    \n    return {\n        \"Fajr\": time_to_str(Fajr),\n        \"Sunrise\": time_to_str(sunrise),\n        \"Dhuhr\": time_to_str(Dhuhr),\n        \"Asr\": time_to_str(Asr),\n        \"Maghrib\": time_to_str(Maghrib),\n        \"Isha\": time_to_str(Isha),\n        \"Method\": \"One-Seventh\" if fajr_twilight or isha_twilight else \"MWL Standard\"\n    }\n\n# Calculate and print prayer times\njd = to_julian_date(date)\nprint(f\"Prayer Times for Helsinki, Finland on {date.strftime('%Y-%m-%d')}\")\ntimes = prayer_times(locations[0][\"lat\"], locations[0][\"lon\"], locations[0][\"tz\"], jd, asr_method=\"standard\")\nif times:\n    for prayer, time in times.items():\n        if prayer != \"Method\":\n            print(f\"{prayer}: {time}\")\n        else:\n            print(f\"Method Used: {time}\")\nelse:\n    print(\"Unable to calculate (polar night/day).\")"
        }
    ]
}