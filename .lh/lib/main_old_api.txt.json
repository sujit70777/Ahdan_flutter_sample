{
    "sourceFile": "lib/main_old_api.txt",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748429365541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748429365541,
            "name": "Commit-0",
            "content": "\nimport 'dart:convert';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() => runApp(\n  MaterialApp(\n    theme: ThemeData.dark(),\n    debugShowCheckedModeBanner: false,\n    home: PrayerTimesDemo(),\n  ),\n);\n\nclass PrayerTimesDemo extends StatefulWidget {\n  @override\n  _PrayerTimesDemoState createState() => _PrayerTimesDemoState();\n}\n\nclass _PrayerTimesDemoState extends State<PrayerTimesDemo> {\n  final TextEditingController _latController = TextEditingController(\n    text: '60.1699',\n  );\n  final TextEditingController _lngController = TextEditingController(\n    text: '24.9384',\n  );\n\n  Map<String, String>? _prayerTimes;\n  final DateFormat _timeFormat = DateFormat.jm();\n  DateTime _selectedDate = DateTime.now();\n\n  int _method = 3; // Default method: Umm al-Qura\n  final List<Map<String, dynamic>> _methods = [\n    {'name': 'Muslim World League', 'value': 3},\n    {'name': 'Egyptian', 'value': 5},\n    {'name': 'Karachi', 'value': 1},\n    {'name': 'Umm al-Qura', 'value': 4},\n    {'name': 'Dubai', 'value': 12},\n    {'name': 'Moonsighting Committee', 'value': 8},\n    {'name': 'North America (ISNA)', 'value': 2},\n    {'name': 'Kuwait', 'value': 9},\n    {'name': 'Qatar', 'value': 10},\n    {'name': 'Singapore', 'value': 11},\n    {'name': 'Tehran', 'value': 7},\n    {'name': 'Turkey', 'value': 13},\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Prayer Times via Aladhan API')),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          children: [\n            _buildLocationInput(),\n            _buildMethodDropdown(),\n            _buildDateSelection(),\n            ElevatedButton(\n              onPressed: _fetchPrayerTimes,\n              child: const Text('Fetch Prayer Times'),\n            ),\n            if (_prayerTimes != null) _buildResults(),\n            const SizedBox(height: 16),\n            const Text(\n              'This app uses the Aladhan.com API for prayer times.',\n              textAlign: TextAlign.center,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildLocationInput() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          children: [\n            TextField(\n              controller: _latController,\n              decoration: const InputDecoration(labelText: 'Latitude'),\n              keyboardType: TextInputType.number,\n            ),\n            TextField(\n              controller: _lngController,\n              decoration: const InputDecoration(labelText: 'Longitude'),\n              keyboardType: TextInputType.number,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildMethodDropdown() {\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: DropdownButtonFormField<int>(\n          value: _method,\n          items:\n              _methods.map((method) {\n                return DropdownMenuItem<int>(\n                  value: method['value'],\n                  child: Text(method['name']),\n                );\n              }).toList(),\n          onChanged: (value) {\n            setState(() {\n              _method = value!;\n            });\n          },\n          decoration: const InputDecoration(labelText: 'Calculation Method'),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildDateSelection() {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        Text('Date: ${DateFormat.yMd().format(_selectedDate)}'),\n        IconButton(\n          icon: const Icon(Icons.calendar_today),\n          onPressed: () => _selectDate(context),\n        ),\n      ],\n    );\n  }\n\n  Future<void> _selectDate(BuildContext context) async {\n    final DateTime? picked = await showDatePicker(\n      context: context,\n      initialDate: _selectedDate,\n      firstDate: DateTime(2000),\n      lastDate: DateTime(2100),\n    );\n    if (picked != null && picked != _selectedDate) {\n      setState(() {\n        _selectedDate = picked;\n      });\n    }\n  }\n\n  Future<void> _fetchPrayerTimes() async {\n    try {\n      final double lat = double.parse(_latController.text);\n      final double lng = double.parse(_lngController.text);\n\n      final dateString = DateFormat('dd-MM-yyyy').format(_selectedDate);\n      final url = Uri.parse(\n        'https://api.aladhan.com/v1/timings/$dateString?latitude=$lat&longitude=$lng&method=$_method',\n      );\n\n      print(url.toString()); // Debugging line to check the URL\n\n      final response = await http.get(url);\n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final timings = Map<String, dynamic>.from(data['data']['timings']);\n        setState(() {\n          _prayerTimes = timings.map((k, v) => MapEntry(k, v.toString()));\n        });\n      } else {\n        throw Exception('Error: ${response.statusCode}');\n      }\n    } catch (e) {\n      showDialog(\n        context: context,\n        builder:\n            (_) => AlertDialog(\n              title: const Text('Error'),\n              content: Text(e.toString()),\n              actions: [\n                TextButton(\n                  onPressed: () => Navigator.pop(context),\n                  child: const Text('OK'),\n                ),\n              ],\n            ),\n      );\n    }\n  }\n\n  Widget _buildResults() {\n    final keys = ['Fajr', 'Sunrise', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'];\n    return Card(\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          children: [\n            Text(\n              'Prayer times for ${DateFormat.yMMMMd().format(_selectedDate)}',\n              style: const TextStyle(fontWeight: FontWeight.bold),\n            ),\n            const SizedBox(height: 8),\n            ...keys.map((key) => _buildTimeRow(key, _prayerTimes![key]!)),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTimeRow(String name, String timeStr) {\n    // Parse string like \"04:10\" to DateTime today\n    final now = DateTime.now();\n    final parts = timeStr.split(':');\n    final parsedTime = DateTime(\n      now.year,\n      now.month,\n      now.day,\n      int.tryParse(parts[0]) ?? 0,\n      int.tryParse(parts[1]) ?? 0,\n    );\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 8),\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n        children: [Text(name), Text(_timeFormat.format(parsedTime))],\n      ),\n    );\n  }\n}\n"
        }
    ]
}