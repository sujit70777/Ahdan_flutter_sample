
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:http/http.dart' as http;

void main() => runApp(
  MaterialApp(
    theme: ThemeData.dark(),
    debugShowCheckedModeBanner: false,
    home: PrayerTimesDemo(),
  ),
);

class PrayerTimesDemo extends StatefulWidget {
  @override
  _PrayerTimesDemoState createState() => _PrayerTimesDemoState();
}

class _PrayerTimesDemoState extends State<PrayerTimesDemo> {
  final TextEditingController _latController = TextEditingController(
    text: '60.1699',
  );
  final TextEditingController _lngController = TextEditingController(
    text: '24.9384',
  );

  Map<String, String>? _prayerTimes;
  final DateFormat _timeFormat = DateFormat.jm();
  DateTime _selectedDate = DateTime.now();

  int _method = 3; // Default method: Umm al-Qura
  final List<Map<String, dynamic>> _methods = [
    {'name': 'Muslim World League', 'value': 3},
    {'name': 'Egyptian', 'value': 5},
    {'name': 'Karachi', 'value': 1},
    {'name': 'Umm al-Qura', 'value': 4},
    {'name': 'Dubai', 'value': 12},
    {'name': 'Moonsighting Committee', 'value': 8},
    {'name': 'North America (ISNA)', 'value': 2},
    {'name': 'Kuwait', 'value': 9},
    {'name': 'Qatar', 'value': 10},
    {'name': 'Singapore', 'value': 11},
    {'name': 'Tehran', 'value': 7},
    {'name': 'Turkey', 'value': 13},
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Prayer Times via Aladhan API')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            _buildLocationInput(),
            _buildMethodDropdown(),
            _buildDateSelection(),
            ElevatedButton(
              onPressed: _fetchPrayerTimes,
              child: const Text('Fetch Prayer Times'),
            ),
            if (_prayerTimes != null) _buildResults(),
            const SizedBox(height: 16),
            const Text(
              'This app uses the Aladhan.com API for prayer times.',
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLocationInput() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: _latController,
              decoration: const InputDecoration(labelText: 'Latitude'),
              keyboardType: TextInputType.number,
            ),
            TextField(
              controller: _lngController,
              decoration: const InputDecoration(labelText: 'Longitude'),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMethodDropdown() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: DropdownButtonFormField<int>(
          value: _method,
          items:
              _methods.map((method) {
                return DropdownMenuItem<int>(
                  value: method['value'],
                  child: Text(method['name']),
                );
              }).toList(),
          onChanged: (value) {
            setState(() {
              _method = value!;
            });
          },
          decoration: const InputDecoration(labelText: 'Calculation Method'),
        ),
      ),
    );
  }

  Widget _buildDateSelection() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text('Date: ${DateFormat.yMd().format(_selectedDate)}'),
        IconButton(
          icon: const Icon(Icons.calendar_today),
          onPressed: () => _selectDate(context),
        ),
      ],
    );
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  Future<void> _fetchPrayerTimes() async {
    try {
      final double lat = double.parse(_latController.text);
      final double lng = double.parse(_lngController.text);

      final dateString = DateFormat('dd-MM-yyyy').format(_selectedDate);
      final url = Uri.parse(
        'https://api.aladhan.com/v1/timings/$dateString?latitude=$lat&longitude=$lng&method=$_method',
      );

      print(url.toString()); // Debugging line to check the URL

      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final timings = Map<String, dynamic>.from(data['data']['timings']);
        setState(() {
          _prayerTimes = timings.map((k, v) => MapEntry(k, v.toString()));
        });
      } else {
        throw Exception('Error: ${response.statusCode}');
      }
    } catch (e) {
      showDialog(
        context: context,
        builder:
            (_) => AlertDialog(
              title: const Text('Error'),
              content: Text(e.toString()),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('OK'),
                ),
              ],
            ),
      );
    }
  }

  Widget _buildResults() {
    final keys = ['Fajr', 'Sunrise', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'];
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Text(
              'Prayer times for ${DateFormat.yMMMMd().format(_selectedDate)}',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            ...keys.map((key) => _buildTimeRow(key, _prayerTimes![key]!)),
          ],
        ),
      ),
    );
  }

  Widget _buildTimeRow(String name, String timeStr) {
    // Parse string like "04:10" to DateTime today
    final now = DateTime.now();
    final parts = timeStr.split(':');
    final parsedTime = DateTime(
      now.year,
      now.month,
      now.day,
      int.tryParse(parts[0]) ?? 0,
      int.tryParse(parts[1]) ?? 0,
    );
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [Text(name), Text(_timeFormat.format(parsedTime))],
      ),
    );
  }
}
